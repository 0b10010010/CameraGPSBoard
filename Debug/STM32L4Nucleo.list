
STM32L4Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004608  08004608  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004608  08004608  00014608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004610  08004610  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab0  20000074  0800468c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  20000b24  0800468c  00020b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1f3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002312  00000000  00000000  0002e297  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a48  00000000  00000000  000305b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000920  00000000  00000000  00030ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d1c8  00000000  00000000  00031918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ab41  00000000  00000000  0004eae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a2839  00000000  00000000  00059621  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fbe5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad4  00000000  00000000  000fbed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004528 	.word	0x08004528

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004528 	.word	0x08004528

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <initBuffer>:
 *      Author: alexk
 */

#include "CircularBuffer.h"

void initBuffer(commBuffer_t* comm, uint8_t Type) {
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
	comm->type = Type;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	78fa      	ldrb	r2, [r7, #3]
 8000590:	f883 2809 	strb.w	r2, [r3, #2057]	; 0x809
	comm->head = 0;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
	comm->tail = 0;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
	comm->MessageCount = 0;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2200      	movs	r2, #0
 80005a4:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
	comm->buffer[0] = 0;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	721a      	strb	r2, [r3, #8]
	comm->bufferSize = 0;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2200      	movs	r2, #0
 80005b2:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
	comm->fullFlag = 0;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <putChar>:

uint8_t haveMessage(commBuffer_t* comm) {
	return comm->MessageCount;
}

void putChar(commBuffer_t* comm, char ch) {
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	70fb      	strb	r3, [r7, #3]
	if (comm->fullFlag == 0) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f893 3814 	ldrb.w	r3, [r3, #2068]	; 0x814
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d144      	bne.n	800066a <putChar+0xa0>
		if ((comm->head < MAX_BUFFER_SIZE)) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005e8:	d217      	bcs.n	800061a <putChar+0x50>
			comm->buffer[comm->head] = ch;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	78fa      	ldrb	r2, [r7, #3]
 80005f4:	721a      	strb	r2, [r3, #8]
			comm->head++;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]
			if (ch == '\n' || ch == '\0') { comm->MessageCount++; }
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	2b0a      	cmp	r3, #10
 8000604:	d002      	beq.n	800060c <putChar+0x42>
 8000606:	78fb      	ldrb	r3, [r7, #3]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d106      	bne.n	800061a <putChar+0x50>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
		}
		if (comm->head == MAX_BUFFER_SIZE) {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000622:	d10b      	bne.n	800063c <putChar+0x72>
			comm->buffer[comm->head] = '\n';
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	4413      	add	r3, r2
 800062c:	220a      	movs	r2, #10
 800062e:	721a      	strb	r2, [r3, #8]
			ch = '\n';
 8000630:	230a      	movs	r3, #10
 8000632:	70fb      	strb	r3, [r7, #3]
			comm->fullFlag = 1;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2201      	movs	r2, #1
 8000638:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
		}
		if ((ch == '\n' || ch == '\0') && (comm->fullFlag)) {
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	2b0a      	cmp	r3, #10
 8000640:	d002      	beq.n	8000648 <putChar+0x7e>
 8000642:	78fb      	ldrb	r3, [r7, #3]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d110      	bne.n	800066a <putChar+0xa0>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f893 3814 	ldrb.w	r3, [r3, #2068]	; 0x814
 800064e:	2b00      	cmp	r3, #0
 8000650:	d00b      	beq.n	800066a <putChar+0xa0>
			comm->MessageCount++;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
			comm->fullFlag = 0;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
			return;
 8000668:	bf00      	nop
		}
	}
}
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <getChar>:

char getChar(commBuffer_t* comm) {
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	char ch = comm->buffer[comm->tail];
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	7a1b      	ldrb	r3, [r3, #8]
 8000686:	73fb      	strb	r3, [r7, #15]
	comm->tail++;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	1c5a      	adds	r2, r3, #1
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	605a      	str	r2, [r3, #4]
	if (ch == '\n' || ch == '\0') {
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	2b0a      	cmp	r3, #10
 8000696:	d002      	beq.n	800069e <getChar+0x2a>
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d10a      	bne.n	80006b4 <getChar+0x40>
		comm->fullFlag = 0;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
		comm->MessageCount--;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80006ac:	1e5a      	subs	r2, r3, #1
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
	}
	if (comm->tail == comm->head) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d10c      	bne.n	80006da <getChar+0x66>
		if (comm->tail == MAX_BUFFER_SIZE) { ch = '\n'; }
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006c8:	d101      	bne.n	80006ce <getChar+0x5a>
 80006ca:	230a      	movs	r3, #10
 80006cc:	73fb      	strb	r3, [r7, #15]
		comm->tail = 0;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
		comm->head = 0;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
	}
	return ch;
 80006da:	7bfb      	ldrb	r3, [r7, #15]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <getBufferSize>:
			}
		}
	}
}

int getBufferSize(commBuffer_t* comm) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	comm->bufferSize = (comm->head - comm->tail + MAX_BUFFER_SIZE) % MAX_BUFFER_SIZE;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
	return (comm->bufferSize);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
}
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <MX_GPIO_Init+0xb8>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a27      	ldr	r2, [pc, #156]	; (80007d0 <MX_GPIO_Init+0xb8>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xb8>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <MX_GPIO_Init+0xb8>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <MX_GPIO_Init+0xb8>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_GPIO_Init+0xb8>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_GPIO_Init+0xb8>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <MX_GPIO_Init+0xb8>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_GPIO_Init+0xb8>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2108      	movs	r1, #8
 800077a:	4816      	ldr	r0, [pc, #88]	; (80007d4 <MX_GPIO_Init+0xbc>)
 800077c:	f001 f96c 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Camera_Hotshoe_Pin;
 8000780:	2302      	movs	r3, #2
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_GPIO_Init+0xc0>)
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000788:	2301      	movs	r3, #1
 800078a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Camera_Hotshoe_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f000 ffed 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED3_Pin;
 800079a:	2308      	movs	r3, #8
 800079c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <MX_GPIO_Init+0xbc>)
 80007b2:	f000 ffdf 	bl	8001774 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2101      	movs	r1, #1
 80007ba:	2007      	movs	r0, #7
 80007bc:	f000 fdfb 	bl	80013b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007c0:	2007      	movs	r0, #7
 80007c2:	f000 fe14 	bl	80013ee <HAL_NVIC_EnableIRQ>

}
 80007c6:	bf00      	nop
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48000400 	.word	0x48000400
 80007d8:	10110000 	.word	0x10110000

080007dc <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	bfb8      	it	lt
 80007ea:	425b      	neglt	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <_Z11sendGPSDatav>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void sendGPSData() // takes about 14050 cycles -> 14050/80MHz = 0.000175625 sec
{
 80007f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007fc:	b094      	sub	sp, #80	; 0x50
 80007fe:	af0c      	add	r7, sp, #48	; 0x30
	imgIndex++;
 8000800:	4b39      	ldr	r3, [pc, #228]	; (80008e8 <_Z11sendGPSDatav+0xf0>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	b29a      	uxth	r2, r3
 8000808:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <_Z11sendGPSDatav+0xf0>)
 800080a:	801a      	strh	r2, [r3, #0]
	// prepare the string with GPS data to send via USB
	snprintf(buffer, 101, "Image index:%i,Date:%i/%i/%i %i:%i:%i.%liLat:%li.%li,Lon:%li.%li\n\r", imgIndex, ubxMessage.pvt.year, ubxMessage.pvt.month, ubxMessage.pvt.day, ubxMessage.pvt.hour,ubxMessage.pvt.minute, ubxMessage.pvt.second, ubxMessage.pvt.nano, ubxMessage.pvt.lat/10000000, abs(ubxMessage.pvt.lat%10000000), ubxMessage.pvt.lon/10000000, abs(ubxMessage.pvt.lon%10000000));
 800080c:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <_Z11sendGPSDatav+0xf0>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	4698      	mov	r8, r3
 8000812:	4b36      	ldr	r3, [pc, #216]	; (80008ec <_Z11sendGPSDatav+0xf4>)
 8000814:	891b      	ldrh	r3, [r3, #8]
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	4b34      	ldr	r3, [pc, #208]	; (80008ec <_Z11sendGPSDatav+0xf4>)
 800081a:	7a9b      	ldrb	r3, [r3, #10]
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	4b33      	ldr	r3, [pc, #204]	; (80008ec <_Z11sendGPSDatav+0xf4>)
 8000820:	7adb      	ldrb	r3, [r3, #11]
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	4b31      	ldr	r3, [pc, #196]	; (80008ec <_Z11sendGPSDatav+0xf4>)
 8000826:	7b1b      	ldrb	r3, [r3, #12]
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <_Z11sendGPSDatav+0xf4>)
 800082c:	7b5b      	ldrb	r3, [r3, #13]
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <_Z11sendGPSDatav+0xf4>)
 8000832:	7b9b      	ldrb	r3, [r3, #14]
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <_Z11sendGPSDatav+0xf4>)
 8000838:	695c      	ldr	r4, [r3, #20]
 800083a:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <_Z11sendGPSDatav+0xf4>)
 800083c:	6a1b      	ldr	r3, [r3, #32]
 800083e:	4a2c      	ldr	r2, [pc, #176]	; (80008f0 <_Z11sendGPSDatav+0xf8>)
 8000840:	fb82 1203 	smull	r1, r2, r2, r3
 8000844:	1592      	asrs	r2, r2, #22
 8000846:	17db      	asrs	r3, r3, #31
 8000848:	1ad5      	subs	r5, r2, r3
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <_Z11sendGPSDatav+0xf4>)
 800084c:	6a1b      	ldr	r3, [r3, #32]
 800084e:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <_Z11sendGPSDatav+0xf8>)
 8000850:	fb82 1203 	smull	r1, r2, r2, r3
 8000854:	1591      	asrs	r1, r2, #22
 8000856:	17da      	asrs	r2, r3, #31
 8000858:	1a8a      	subs	r2, r1, r2
 800085a:	4926      	ldr	r1, [pc, #152]	; (80008f4 <_Z11sendGPSDatav+0xfc>)
 800085c:	fb01 f202 	mul.w	r2, r1, r2
 8000860:	1a9a      	subs	r2, r3, r2
 8000862:	4610      	mov	r0, r2
 8000864:	f7ff ffba 	bl	80007dc <_ZSt3absl>
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	4b20      	ldr	r3, [pc, #128]	; (80008ec <_Z11sendGPSDatav+0xf4>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a20      	ldr	r2, [pc, #128]	; (80008f0 <_Z11sendGPSDatav+0xf8>)
 8000870:	fb82 1203 	smull	r1, r2, r2, r3
 8000874:	1592      	asrs	r2, r2, #22
 8000876:	17db      	asrs	r3, r3, #31
 8000878:	1ad6      	subs	r6, r2, r3
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <_Z11sendGPSDatav+0xf4>)
 800087c:	69da      	ldr	r2, [r3, #28]
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <_Z11sendGPSDatav+0xf8>)
 8000880:	fb83 1302 	smull	r1, r3, r3, r2
 8000884:	1599      	asrs	r1, r3, #22
 8000886:	17d3      	asrs	r3, r2, #31
 8000888:	1acb      	subs	r3, r1, r3
 800088a:	491a      	ldr	r1, [pc, #104]	; (80008f4 <_Z11sendGPSDatav+0xfc>)
 800088c:	fb01 f303 	mul.w	r3, r1, r3
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ffa2 	bl	80007dc <_ZSt3absl>
 8000898:	4603      	mov	r3, r0
 800089a:	930a      	str	r3, [sp, #40]	; 0x28
 800089c:	9609      	str	r6, [sp, #36]	; 0x24
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	9208      	str	r2, [sp, #32]
 80008a2:	9507      	str	r5, [sp, #28]
 80008a4:	9406      	str	r4, [sp, #24]
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	9205      	str	r2, [sp, #20]
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	9204      	str	r2, [sp, #16]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	9203      	str	r2, [sp, #12]
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	9202      	str	r2, [sp, #8]
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	9201      	str	r2, [sp, #4]
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	4643      	mov	r3, r8
 80008c0:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <_Z11sendGPSDatav+0x100>)
 80008c2:	2165      	movs	r1, #101	; 0x65
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <_Z11sendGPSDatav+0x104>)
 80008c6:	f003 fa15 	bl	8003cf4 <sniprintf>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)buffer, strlen(buffer));
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <_Z11sendGPSDatav+0x104>)
 80008cc:	f7ff fc80 	bl	80001d0 <strlen>
 80008d0:	4603      	mov	r3, r0
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	4909      	ldr	r1, [pc, #36]	; (80008fc <_Z11sendGPSDatav+0x104>)
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <_Z11sendGPSDatav+0x108>)
 80008da:	f002 f98f 	bl	8002bfc <HAL_UART_Transmit_IT>
}
 80008de:	bf00      	nop
 80008e0:	3720      	adds	r7, #32
 80008e2:	46bd      	mov	sp, r7
 80008e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008e8:	20000972 	.word	0x20000972
 80008ec:	20000090 	.word	0x20000090
 80008f0:	6b5fca6b 	.word	0x6b5fca6b
 80008f4:	00989680 	.word	0x00989680
 80008f8:	08004540 	.word	0x08004540
 80008fc:	2000090c 	.word	0x2000090c
 8000900:	20000a04 	.word	0x20000a04

08000904 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f000 fc09 	bl	800111e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f820 	bl	8000950 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  initBuffer(&rxBuffer, CIRCULAR_RX);
 8000910:	2101      	movs	r1, #1
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <main+0x3c>)
 8000914:	f7ff fe34 	bl	8000580 <initBuffer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init(); // Camera Hotshoe interrupt pin
 8000918:	f7ff fefe 	bl	8000718 <MX_GPIO_Init>
//  MX_DMA_Init();  // GPS receive DMA init.
  MX_USART1_UART_Init(); // GPS receive init. Read bytes in IT
 800091c:	f000 faa6 	bl	8000e6c <MX_USART1_UART_Init>
  MX_USART2_UART_Init(); // ST-Link (USB) Init. Used for transferring last GPS data when Camera Hotshoe interrupts
 8000920:	f000 fad8 	bl	8000ed4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2108      	movs	r1, #8
 8000928:	4806      	ldr	r0, [pc, #24]	; (8000944 <main+0x40>)
 800092a:	f001 f895 	bl	8001a58 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart1, &c, 1);
 800092e:	2201      	movs	r2, #1
 8000930:	4905      	ldr	r1, [pc, #20]	; (8000948 <main+0x44>)
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <main+0x48>)
 8000934:	f002 f9be 	bl	8002cb4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	readGPS(&rxBuffer);
 8000938:	4801      	ldr	r0, [pc, #4]	; (8000940 <main+0x3c>)
 800093a:	f000 f9fb 	bl	8000d34 <readGPS>
 800093e:	e7fb      	b.n	8000938 <main+0x34>
 8000940:	200000f0 	.word	0x200000f0
 8000944:	48000400 	.word	0x48000400
 8000948:	20000908 	.word	0x20000908
 800094c:	20000984 	.word	0x20000984

08000950 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0a4      	sub	sp, #144	; 0x90
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800095a:	2244      	movs	r2, #68	; 0x44
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f003 f9c0 	bl	8003ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2234      	movs	r2, #52	; 0x34
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f003 f9b2 	bl	8003ce4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000980:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000984:	f001 f8a6 	bl	8001ad4 <HAL_PWREx_ControlVoltageScaling>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	bf14      	ite	ne
 800098e:	2301      	movne	r3, #1
 8000990:	2300      	moveq	r3, #0
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 8000998:	f000 f886 	bl	8000aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800099c:	2302      	movs	r3, #2
 800099e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a6:	2340      	movs	r3, #64	; 0x40
 80009a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009aa:	2302      	movs	r3, #2
 80009ac:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ae:	2302      	movs	r3, #2
 80009b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009b8:	230a      	movs	r3, #10
 80009ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009be:	2302      	movs	r3, #2
 80009c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 f8d6 	bl	8001b80 <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	bf14      	ite	ne
 80009da:	2301      	movne	r3, #1
 80009dc:	2300      	moveq	r3, #0
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 80009e4:	f000 f860 	bl	8000aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e8:	230f      	movs	r3, #15
 80009ea:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ec:	2303      	movs	r3, #3
 80009ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a00:	2104      	movs	r1, #4
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fd22 	bl	800244c <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf14      	ite	ne
 8000a0e:	2301      	movne	r3, #1
 8000a10:	2300      	moveq	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8000a18:	f000 f846 	bl	8000aa8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 ff12 	bl	8002854 <HAL_RCCEx_PeriphCLKConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf14      	ite	ne
 8000a36:	2301      	movne	r3, #1
 8000a38:	2300      	moveq	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <_Z18SystemClock_Configv+0xf4>
  {
    Error_Handler();
 8000a40:	f000 f832 	bl	8000aa8 <Error_Handler>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3790      	adds	r7, #144	; 0x90
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_1)
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d101      	bne.n	8000a60 <HAL_GPIO_EXTI_Callback+0x14>
  {
    sendGPSData();
 8000a5c:	f7ff fecc 	bl	80007f8 <_Z11sendGPSDatav>
  }
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // takes about 360 cycles -> 360/80Mhz = 0.0000045 sec
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_UART_RxCpltCallback+0x30>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d10a      	bne.n	8000a90 <HAL_UART_RxCpltCallback+0x28>
  {
	  putChar(&rxBuffer, c);
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_UART_RxCpltCallback+0x34>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <HAL_UART_RxCpltCallback+0x38>)
 8000a82:	f7ff fda2 	bl	80005ca <putChar>
	  HAL_UART_Receive_IT(&huart1, &c, 1);
 8000a86:	2201      	movs	r2, #1
 8000a88:	4904      	ldr	r1, [pc, #16]	; (8000a9c <HAL_UART_RxCpltCallback+0x34>)
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <HAL_UART_RxCpltCallback+0x3c>)
 8000a8c:	f002 f912 	bl	8002cb4 <HAL_UART_Receive_IT>
  }
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40013800 	.word	0x40013800
 8000a9c:	20000908 	.word	0x20000908
 8000aa0:	200000f0 	.word	0x200000f0
 8000aa4:	20000984 	.word	0x20000984

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_MspInit+0x44>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <HAL_MspInit+0x44>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <HAL_MspInit+0x44>)
 8000acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x44>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x44>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x44>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 fb36 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b60:	2002      	movs	r0, #2
 8000b62:	f000 ff91 	bl	8001a88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <DMA1_Channel5_IRQHandler+0x10>)
 8000b72:	f000 fd50 	bl	8001616 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000a84 	.word	0x20000a84

08000b80 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <DMA1_Channel7_IRQHandler+0x10>)
 8000b86:	f000 fd46 	bl	8001616 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000acc 	.word	0x20000acc

08000b94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <USART1_IRQHandler+0x10>)
 8000b9a:	f002 f92d 	bl	8002df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000984 	.word	0x20000984

08000ba8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <USART2_IRQHandler+0x10>)
 8000bae:	f002 f923 	bl	8002df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000a04 	.word	0x20000a04

08000bbc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <_sbrk+0x50>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x16>
		heap_end = &end;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <_sbrk+0x50>)
 8000bce:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <_sbrk+0x54>)
 8000bd0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <_sbrk+0x50>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <_sbrk+0x50>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4413      	add	r3, r2
 8000be0:	466a      	mov	r2, sp
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d907      	bls.n	8000bf6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000be6:	f003 f853 	bl	8003c90 <__errno>
 8000bea:	4602      	mov	r2, r0
 8000bec:	230c      	movs	r3, #12
 8000bee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf4:	e006      	b.n	8000c04 <_sbrk+0x48>
	}

	heap_end += incr;
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <_sbrk+0x50>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a03      	ldr	r2, [pc, #12]	; (8000c0c <_sbrk+0x50>)
 8000c00:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000974 	.word	0x20000974
 8000c10:	20000b28 	.word	0x20000b28

08000c14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <SystemInit+0x64>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <SystemInit+0x64>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <SystemInit+0x68>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <SystemInit+0x68>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <SystemInit+0x68>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <SystemInit+0x68>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <SystemInit+0x68>)
 8000c40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <SystemInit+0x68>)
 8000c4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <SystemInit+0x68>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <SystemInit+0x68>)
 8000c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <SystemInit+0x68>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <SystemInit+0x64>)
 8000c66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00
 8000c7c:	40021000 	.word	0x40021000

08000c80 <compareMsgHeader>:

#include "ublox_gps.h"

// Compares the first two bytes of the ubxMessage struct with a specific message header.
// Returns true if the two bytes match.
bool compareMsgHeader(const unsigned char* msgHeader) {
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  unsigned char* ptr = (unsigned char*)(&ubxMessage);
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <compareMsgHeader+0x40>)
 8000c8a:	60fb      	str	r3, [r7, #12]
  return ptr[0] == msgHeader[0] && ptr[1] == msgHeader[1];
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d109      	bne.n	8000cac <compareMsgHeader+0x2c>
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d101      	bne.n	8000cac <compareMsgHeader+0x2c>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e000      	b.n	8000cae <compareMsgHeader+0x2e>
 8000cac:	2300      	movs	r3, #0
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	20000090 	.word	0x20000090

08000cc4 <calcChecksum>:

void calcChecksum(unsigned char* CK, int msgSize) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  memset(CK, 0, 2);
 8000cce:	2202      	movs	r2, #2
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f003 f806 	bl	8003ce4 <memset>
  for (int i = 0; i < msgSize; i++) {
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	e016      	b.n	8000d0c <calcChecksum+0x48>
    CK[0] += ((unsigned char*)(&ubxMessage))[i];
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4912      	ldr	r1, [pc, #72]	; (8000d30 <calcChecksum+0x6c>)
 8000ce6:	440b      	add	r3, r1
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	701a      	strb	r2, [r3, #0]
    CK[1] += CK[0];
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	7819      	ldrb	r1, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	781a      	ldrb	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	440a      	add	r2, r1
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < msgSize; i++) {
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbe4      	blt.n	8000cde <calcChecksum+0x1a>
  }
  // ensure unsigned byte range
  CK[0] = CK[0] & 0xFF;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	781a      	ldrb	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	701a      	strb	r2, [r3, #0]
  CK[1] = CK[1] & 0xFF;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	7852      	ldrb	r2, [r2, #1]
 8000d24:	701a      	strb	r2, [r3, #0]
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000090 	.word	0x20000090

08000d34 <readGPS>:

int readGPS(commBuffer_t* rxBuffer)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  static int fpos = 0;
  static unsigned char checksum[2];
  static uint8_t currentMsgType = MT_NONE;
  static int payloadSize = sizeof(ubxMessage);

  while ( getBufferSize(rxBuffer) ) {
 8000d3c:	e07b      	b.n	8000e36 <readGPS+0x102>
	char c = getChar(rxBuffer);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff fc98 	bl	8000674 <getChar>
 8000d44:	4603      	mov	r3, r0
 8000d46:	73fb      	strb	r3, [r7, #15]
	if ( fpos < 2 ) {
 8000d48:	4b41      	ldr	r3, [pc, #260]	; (8000e50 <readGPS+0x11c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	dc10      	bgt.n	8000d72 <readGPS+0x3e>
	  // For the first two bytes we are simply looking for a match with the UBX header bytes (0xB5,0x62)
	  if ( c == UBX_HEADER[fpos] )
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <readGPS+0x11c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a3f      	ldr	r2, [pc, #252]	; (8000e54 <readGPS+0x120>)
 8000d56:	5cd3      	ldrb	r3, [r2, r3]
 8000d58:	7bfa      	ldrb	r2, [r7, #15]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d105      	bne.n	8000d6a <readGPS+0x36>
		fpos++;
 8000d5e:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <readGPS+0x11c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	3301      	adds	r3, #1
 8000d64:	4a3a      	ldr	r2, [pc, #232]	; (8000e50 <readGPS+0x11c>)
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	e065      	b.n	8000e36 <readGPS+0x102>
	  else
		fpos = 0; // Reset to beginning state.
 8000d6a:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <readGPS+0x11c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	e061      	b.n	8000e36 <readGPS+0x102>
	  // If we come here then fpos >= 2, which means we have found a match with the UBX_HEADER
	  // and we are now reading in the bytes that make up the payload.

	  // Place the incoming byte into the ubxMessage struct. The position is fpos-2 because
	  // the struct does not include the initial two-byte header (UBX_HEADER).
	  if ( (fpos - 2) < payloadSize )
 8000d72:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <readGPS+0x11c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	1e9a      	subs	r2, r3, #2
 8000d78:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <readGPS+0x124>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	da06      	bge.n	8000d8e <readGPS+0x5a>
		((unsigned char*)(&ubxMessage))[fpos - 2] = c;
 8000d80:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <readGPS+0x11c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3b02      	subs	r3, #2
 8000d86:	4a35      	ldr	r2, [pc, #212]	; (8000e5c <readGPS+0x128>)
 8000d88:	4413      	add	r3, r2
 8000d8a:	7bfa      	ldrb	r2, [r7, #15]
 8000d8c:	701a      	strb	r2, [r3, #0]

	  fpos++;
 8000d8e:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <readGPS+0x11c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	3301      	adds	r3, #1
 8000d94:	4a2e      	ldr	r2, [pc, #184]	; (8000e50 <readGPS+0x11c>)
 8000d96:	6013      	str	r3, [r2, #0]

	  if ( fpos == 4 ) {
 8000d98:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <readGPS+0x11c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d110      	bne.n	8000dc2 <readGPS+0x8e>
		// so now we can check to see what kind of message it is.
		//        if ( compareMsgHeader(NAV_DOP_HEADER) ) {
		//          currentMsgType = MT_NAV_DOP;
		//          payloadSize = sizeof(NAV_DOP);
		//        }
		if ( compareMsgHeader(NAV_PVT_HEADER) ) {
 8000da0:	482f      	ldr	r0, [pc, #188]	; (8000e60 <readGPS+0x12c>)
 8000da2:	f7ff ff6d 	bl	8000c80 <compareMsgHeader>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d006      	beq.n	8000dba <readGPS+0x86>
		  currentMsgType = MT_NAV_PVT;
 8000dac:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <readGPS+0x130>)
 8000dae:	2202      	movs	r2, #2
 8000db0:	701a      	strb	r2, [r3, #0]
		  payloadSize = sizeof(ubxMessage.pvt);
 8000db2:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <readGPS+0x124>)
 8000db4:	2260      	movs	r2, #96	; 0x60
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e003      	b.n	8000dc2 <readGPS+0x8e>
		//          currentMsgType = MT_NAV_TIMEGPS;
		//          payloadSize = sizeof(NAV_TIMEGPS);
		//        }
		else {
		  // unknown message type, bail
		  fpos = 0;
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <readGPS+0x11c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
		  continue;
 8000dc0:	e039      	b.n	8000e36 <readGPS+0x102>
		}
	  }

	  if ( fpos == (payloadSize + 2) ) {
 8000dc2:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <readGPS+0x124>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	1c9a      	adds	r2, r3, #2
 8000dc8:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <readGPS+0x11c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d106      	bne.n	8000dde <readGPS+0xaa>
		// All payload bytes have now been received, so we can calculate the
		// expected checksum value to compare with the next two incoming bytes.
		calcChecksum(checksum, payloadSize);
 8000dd0:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <readGPS+0x124>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4824      	ldr	r0, [pc, #144]	; (8000e68 <readGPS+0x134>)
 8000dd8:	f7ff ff74 	bl	8000cc4 <calcChecksum>
 8000ddc:	e02b      	b.n	8000e36 <readGPS+0x102>
	  }
	  else if ( fpos == (payloadSize + 3) ) {
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <readGPS+0x124>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	1cda      	adds	r2, r3, #3
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <readGPS+0x11c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d108      	bne.n	8000dfe <readGPS+0xca>
		// First byte after the payload, ie. first byte of the checksum.
		// Does it match the first byte of the checksum we calculated?
		if ( c != checksum[0] ) {
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <readGPS+0x134>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	7bfa      	ldrb	r2, [r7, #15]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d01f      	beq.n	8000e36 <readGPS+0x102>
		  // Checksum doesn't match, reset to beginning state and try again.
		  fpos = 0;
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <readGPS+0x11c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	e01b      	b.n	8000e36 <readGPS+0x102>
		}
	  }
	  else if ( fpos == (payloadSize + 4) ) {
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <readGPS+0x124>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	1d1a      	adds	r2, r3, #4
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <readGPS+0x11c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d10a      	bne.n	8000e22 <readGPS+0xee>
		// Second byte after the payload, ie. second byte of the checksum.
		// Does it match the second byte of the checksum we calculated?
		fpos = 0; // We will reset the state regardless of whether the checksum matches.
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <readGPS+0x11c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
		if ( c == checksum[1] ) {
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <readGPS+0x134>)
 8000e14:	785b      	ldrb	r3, [r3, #1]
 8000e16:	7bfa      	ldrb	r2, [r7, #15]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d10c      	bne.n	8000e36 <readGPS+0x102>
		  // Checksum matches, we have a valid message.
		  //ubxMessage = temp_ubxMessage;
		  //memcpy(&ubxMessage, &temp_ubxMessage, sizeof(temp_ubxMessage));
		  return currentMsgType;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <readGPS+0x130>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	e011      	b.n	8000e46 <readGPS+0x112>
		}
	  }
	  else if ( fpos > (payloadSize + 4) ) {
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <readGPS+0x124>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1d1a      	adds	r2, r3, #4
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <readGPS+0x11c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	da02      	bge.n	8000e36 <readGPS+0x102>
		// We have now read more bytes than both the expected payload and checksum
		// together, so something went wrong. Reset to beginning state and try again.
		fpos = 0;
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <readGPS+0x11c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
  while ( getBufferSize(rxBuffer) ) {
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff fc56 	bl	80006e8 <getBufferSize>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f47f af7d 	bne.w	8000d3e <readGPS+0xa>
	  }
	}
  }
  return MT_NONE;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000978 	.word	0x20000978
 8000e54:	080045cc 	.word	0x080045cc
 8000e58:	20000004 	.word	0x20000004
 8000e5c:	20000090 	.word	0x20000090
 8000e60:	080045d0 	.word	0x080045d0
 8000e64:	2000097c 	.word	0x2000097c
 8000e68:	20000980 	.word	0x20000980

08000e6c <MX_USART1_UART_Init>:
#define HAL_UART_MIN_TX_SIZE 2048
#endif

extern "C" {
void MX_USART1_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_USART1_UART_Init+0x60>)
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <MX_USART1_UART_Init+0x64>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <MX_USART1_UART_Init+0x60>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <MX_USART1_UART_Init+0x60>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_USART1_UART_Init+0x60>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <MX_USART1_UART_Init+0x60>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_USART1_UART_Init+0x60>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <MX_USART1_UART_Init+0x60>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_USART1_UART_Init+0x60>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <MX_USART1_UART_Init+0x60>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <MX_USART1_UART_Init+0x60>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eae:	4807      	ldr	r0, [pc, #28]	; (8000ecc <MX_USART1_UART_Init+0x60>)
 8000eb0:	f001 fe56 	bl	8002b60 <HAL_UART_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bf14      	ite	ne
 8000eba:	2301      	movne	r3, #1
 8000ebc:	2300      	moveq	r3, #0
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000ec4:	f7ff fdf0 	bl	8000aa8 <Error_Handler>
  }

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000984 	.word	0x20000984
 8000ed0:	40013800 	.word	0x40013800

08000ed4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_USART2_UART_Init+0x60>)
 8000eda:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <MX_USART2_UART_Init+0x64>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_USART2_UART_Init+0x60>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_USART2_UART_Init+0x60>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_USART2_UART_Init+0x60>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_USART2_UART_Init+0x60>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_USART2_UART_Init+0x60>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <MX_USART2_UART_Init+0x60>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_USART2_UART_Init+0x60>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <MX_USART2_UART_Init+0x60>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_USART2_UART_Init+0x60>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f16:	4807      	ldr	r0, [pc, #28]	; (8000f34 <MX_USART2_UART_Init+0x60>)
 8000f18:	f001 fe22 	bl	8002b60 <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bf14      	ite	ne
 8000f22:	2301      	movne	r3, #1
 8000f24:	2300      	moveq	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000f2c:	f7ff fdbc 	bl	8000aa8 <Error_Handler>
  }

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000a04 	.word	0x20000a04
 8000f38:	40004400 	.word	0x40004400

08000f3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a57      	ldr	r2, [pc, #348]	; (80010b8 <HAL_UART_MspInit+0x17c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d160      	bne.n	8001020 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f5e:	4b57      	ldr	r3, [pc, #348]	; (80010bc <HAL_UART_MspInit+0x180>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	4a56      	ldr	r2, [pc, #344]	; (80010bc <HAL_UART_MspInit+0x180>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6a:	4b54      	ldr	r3, [pc, #336]	; (80010bc <HAL_UART_MspInit+0x180>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	61bb      	str	r3, [r7, #24]
 8000f74:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b51      	ldr	r3, [pc, #324]	; (80010bc <HAL_UART_MspInit+0x180>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a50      	ldr	r2, [pc, #320]	; (80010bc <HAL_UART_MspInit+0x180>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b4e      	ldr	r3, [pc, #312]	; (80010bc <HAL_UART_MspInit+0x180>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8000f8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fae:	f000 fbe1 	bl	8001774 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000fb2:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <HAL_UART_MspInit+0x184>)
 8000fb4:	4a43      	ldr	r2, [pc, #268]	; (80010c4 <HAL_UART_MspInit+0x188>)
 8000fb6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000fb8:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <HAL_UART_MspInit+0x184>)
 8000fba:	2202      	movs	r2, #2
 8000fbc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fbe:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <HAL_UART_MspInit+0x184>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc4:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <HAL_UART_MspInit+0x184>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <HAL_UART_MspInit+0x184>)
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fd0:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <HAL_UART_MspInit+0x184>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <HAL_UART_MspInit+0x184>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fdc:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <HAL_UART_MspInit+0x184>)
 8000fde:	2220      	movs	r2, #32
 8000fe0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <HAL_UART_MspInit+0x184>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fe8:	4835      	ldr	r0, [pc, #212]	; (80010c0 <HAL_UART_MspInit+0x184>)
 8000fea:	f000 fa1b 	bl	8001424 <HAL_DMA_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bf14      	ite	ne
 8000ff4:	2301      	movne	r3, #1
 8000ff6:	2300      	moveq	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000ffe:	f7ff fd53 	bl	8000aa8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <HAL_UART_MspInit+0x184>)
 8001006:	66da      	str	r2, [r3, #108]	; 0x6c
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a2d      	ldr	r2, [pc, #180]	; (80010c0 <HAL_UART_MspInit+0x184>)
 800100c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2102      	movs	r1, #2
 8001012:	2025      	movs	r0, #37	; 0x25
 8001014:	f000 f9cf 	bl	80013b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001018:	2025      	movs	r0, #37	; 0x25
 800101a:	f000 f9e8 	bl	80013ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800101e:	e047      	b.n	80010b0 <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==USART2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <HAL_UART_MspInit+0x18c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d142      	bne.n	80010b0 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART2_CLK_ENABLE();
 800102a:	4b24      	ldr	r3, [pc, #144]	; (80010bc <HAL_UART_MspInit+0x180>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a23      	ldr	r2, [pc, #140]	; (80010bc <HAL_UART_MspInit+0x180>)
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <HAL_UART_MspInit+0x180>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <HAL_UART_MspInit+0x180>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a1d      	ldr	r2, [pc, #116]	; (80010bc <HAL_UART_MspInit+0x180>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <HAL_UART_MspInit+0x180>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_Link_TX_Pin;
 800105a:	2304      	movs	r3, #4
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106a:	2307      	movs	r3, #7
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ST_Link_TX_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f000 fb7c 	bl	8001774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ST_Link_RX_Pin;
 800107c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800108e:	2303      	movs	r3, #3
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ST_Link_RX_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f000 fb6a 	bl	8001774 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2103      	movs	r1, #3
 80010a4:	2026      	movs	r0, #38	; 0x26
 80010a6:	f000 f986 	bl	80013b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010aa:	2026      	movs	r0, #38	; 0x26
 80010ac:	f000 f99f 	bl	80013ee <HAL_NVIC_EnableIRQ>
}
 80010b0:	bf00      	nop
 80010b2:	3730      	adds	r7, #48	; 0x30
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40013800 	.word	0x40013800
 80010bc:	40021000 	.word	0x40021000
 80010c0:	20000a84 	.word	0x20000a84
 80010c4:	40020058 	.word	0x40020058
 80010c8:	40004400 	.word	0x40004400

080010cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001104 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010d2:	e003      	b.n	80010dc <LoopCopyDataInit>

080010d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010da:	3104      	adds	r1, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010dc:	480b      	ldr	r0, [pc, #44]	; (800110c <LoopForever+0xa>)
	ldr	r3, =_edata
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010e4:	d3f6      	bcc.n	80010d4 <CopyDataInit>
	ldr	r2, =_sbss
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010e8:	e002      	b.n	80010f0 <LoopFillZerobss>

080010ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010ec:	f842 3b04 	str.w	r3, [r2], #4

080010f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <LoopForever+0x16>)
	cmp	r2, r3
 80010f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010f4:	d3f9      	bcc.n	80010ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010f6:	f7ff fd8d 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f002 fdcf 	bl	8003c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010fe:	f7ff fc01 	bl	8000904 <main>

08001102 <LoopForever>:

LoopForever:
    b LoopForever
 8001102:	e7fe      	b.n	8001102 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001104:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001108:	08004618 	.word	0x08004618
	ldr	r0, =_sdata
 800110c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001110:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001114:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001118:	20000b24 	.word	0x20000b24

0800111c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC1_2_IRQHandler>

0800111e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 f939 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f80e 	bl	8001150 <HAL_InitTick>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	e001      	b.n	8001144 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001140:	f7ff fcba 	bl	8000ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001144:	79fb      	ldrb	r3, [r7, #7]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_InitTick+0x68>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d022      	beq.n	80011aa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_InitTick+0x6c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_InitTick+0x68>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001170:	fbb1 f3f3 	udiv	r3, r1, r3
 8001174:	fbb2 f3f3 	udiv	r3, r2, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f946 	bl	800140a <HAL_SYSTICK_Config>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d10f      	bne.n	80011a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b0f      	cmp	r3, #15
 8001188:	d809      	bhi.n	800119e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118a:	2200      	movs	r2, #0
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	f000 f910 	bl	80013b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_InitTick+0x70>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e007      	b.n	80011ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e004      	b.n	80011ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e001      	b.n	80011ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000000c 	.word	0x2000000c
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000008 	.word	0x20000008

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_IncTick+0x1c>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_IncTick+0x20>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a03      	ldr	r2, [pc, #12]	; (80011e0 <HAL_IncTick+0x1c>)
 80011d4:	6013      	str	r3, [r2, #0]
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000b1c 	.word	0x20000b1c
 80011e4:	2000000c 	.word	0x2000000c

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000b1c 	.word	0x20000b1c

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800136c:	d301      	bcc.n	8001372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136e:	2301      	movs	r3, #1
 8001370:	e00f      	b.n	8001392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <SysTick_Config+0x40>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137a:	210f      	movs	r1, #15
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f7ff ff8e 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <SysTick_Config+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <SysTick_Config+0x40>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff29 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff3e 	bl	8001248 <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff8e 	bl	80012f4 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5d 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff31 	bl	8001264 <__NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffa2 	bl	800135c <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e098      	b.n	8001568 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	4b4d      	ldr	r3, [pc, #308]	; (8001574 <HAL_DMA_Init+0x150>)
 800143e:	429a      	cmp	r2, r3
 8001440:	d80f      	bhi.n	8001462 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	4b4b      	ldr	r3, [pc, #300]	; (8001578 <HAL_DMA_Init+0x154>)
 800144a:	4413      	add	r3, r2
 800144c:	4a4b      	ldr	r2, [pc, #300]	; (800157c <HAL_DMA_Init+0x158>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	009a      	lsls	r2, r3, #2
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a48      	ldr	r2, [pc, #288]	; (8001580 <HAL_DMA_Init+0x15c>)
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
 8001460:	e00e      	b.n	8001480 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	4b46      	ldr	r3, [pc, #280]	; (8001584 <HAL_DMA_Init+0x160>)
 800146a:	4413      	add	r3, r2
 800146c:	4a43      	ldr	r2, [pc, #268]	; (800157c <HAL_DMA_Init+0x158>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	009a      	lsls	r2, r3, #2
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a42      	ldr	r2, [pc, #264]	; (8001588 <HAL_DMA_Init+0x164>)
 800147e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800149a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014da:	d039      	beq.n	8001550 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	4a27      	ldr	r2, [pc, #156]	; (8001580 <HAL_DMA_Init+0x15c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d11a      	bne.n	800151c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <HAL_DMA_Init+0x168>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f003 031c 	and.w	r3, r3, #28
 80014f2:	210f      	movs	r1, #15
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	4924      	ldr	r1, [pc, #144]	; (800158c <HAL_DMA_Init+0x168>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_DMA_Init+0x168>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150c:	f003 031c 	and.w	r3, r3, #28
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	491d      	ldr	r1, [pc, #116]	; (800158c <HAL_DMA_Init+0x168>)
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
 800151a:	e019      	b.n	8001550 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <HAL_DMA_Init+0x16c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	f003 031c 	and.w	r3, r3, #28
 8001528:	210f      	movs	r1, #15
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	4917      	ldr	r1, [pc, #92]	; (8001590 <HAL_DMA_Init+0x16c>)
 8001532:	4013      	ands	r3, r2
 8001534:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_DMA_Init+0x16c>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6859      	ldr	r1, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f003 031c 	and.w	r3, r3, #28
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	4911      	ldr	r1, [pc, #68]	; (8001590 <HAL_DMA_Init+0x16c>)
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40020407 	.word	0x40020407
 8001578:	bffdfff8 	.word	0xbffdfff8
 800157c:	cccccccd 	.word	0xcccccccd
 8001580:	40020000 	.word	0x40020000
 8001584:	bffdfbf8 	.word	0xbffdfbf8
 8001588:	40020400 	.word	0x40020400
 800158c:	400200a8 	.word	0x400200a8
 8001590:	400204a8 	.word	0x400204a8

08001594 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d005      	beq.n	80015b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2204      	movs	r2, #4
 80015b0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	e029      	b.n	800160c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 020e 	bic.w	r2, r2, #14
 80015c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	f003 021c 	and.w	r2, r3, #28
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	2101      	movs	r1, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	4798      	blx	r3
    }
  }
  return status;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f003 031c 	and.w	r3, r3, #28
 8001636:	2204      	movs	r2, #4
 8001638:	409a      	lsls	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4013      	ands	r3, r2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d026      	beq.n	8001690 <HAL_DMA_IRQHandler+0x7a>
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d021      	beq.n	8001690 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	2b00      	cmp	r3, #0
 8001658:	d107      	bne.n	800166a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0204 	bic.w	r2, r2, #4
 8001668:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f003 021c 	and.w	r2, r3, #28
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	2104      	movs	r1, #4
 8001678:	fa01 f202 	lsl.w	r2, r1, r2
 800167c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	2b00      	cmp	r3, #0
 8001684:	d071      	beq.n	800176a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800168e:	e06c      	b.n	800176a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	f003 031c 	and.w	r3, r3, #28
 8001698:	2202      	movs	r2, #2
 800169a:	409a      	lsls	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d02e      	beq.n	8001702 <HAL_DMA_IRQHandler+0xec>
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d029      	beq.n	8001702 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0320 	and.w	r3, r3, #32
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10b      	bne.n	80016d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 020a 	bic.w	r2, r2, #10
 80016ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	f003 021c 	and.w	r2, r3, #28
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	2102      	movs	r1, #2
 80016e2:	fa01 f202 	lsl.w	r2, r1, r2
 80016e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d038      	beq.n	800176a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001700:	e033      	b.n	800176a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f003 031c 	and.w	r3, r3, #28
 800170a:	2208      	movs	r2, #8
 800170c:	409a      	lsls	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4013      	ands	r3, r2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d02a      	beq.n	800176c <HAL_DMA_IRQHandler+0x156>
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d025      	beq.n	800176c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 020e 	bic.w	r2, r2, #14
 800172e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	f003 021c 	and.w	r2, r3, #28
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
 8001742:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175e:	2b00      	cmp	r3, #0
 8001760:	d004      	beq.n	800176c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800176a:	bf00      	nop
 800176c:	bf00      	nop
}
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001782:	e14e      	b.n	8001a22 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	4013      	ands	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8140 	beq.w	8001a1c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d00b      	beq.n	80017bc <HAL_GPIO_Init+0x48>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d007      	beq.n	80017bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b0:	2b11      	cmp	r3, #17
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b12      	cmp	r3, #18
 80017ba:	d130      	bne.n	800181e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017f2:	2201      	movs	r2, #1
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 0201 	and.w	r2, r3, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0xea>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b12      	cmp	r3, #18
 800185c:	d123      	bne.n	80018a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3208      	adds	r2, #8
 8001866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	220f      	movs	r2, #15
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	691a      	ldr	r2, [r3, #16]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	08da      	lsrs	r2, r3, #3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3208      	adds	r2, #8
 80018a0:	6939      	ldr	r1, [r7, #16]
 80018a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0203 	and.w	r2, r3, #3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 809a 	beq.w	8001a1c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e8:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <HAL_GPIO_Init+0x2cc>)
 80018ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ec:	4a54      	ldr	r2, [pc, #336]	; (8001a40 <HAL_GPIO_Init+0x2cc>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6613      	str	r3, [r2, #96]	; 0x60
 80018f4:	4b52      	ldr	r3, [pc, #328]	; (8001a40 <HAL_GPIO_Init+0x2cc>)
 80018f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001900:	4a50      	ldr	r2, [pc, #320]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	3302      	adds	r3, #2
 8001908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800192a:	d013      	beq.n	8001954 <HAL_GPIO_Init+0x1e0>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a46      	ldr	r2, [pc, #280]	; (8001a48 <HAL_GPIO_Init+0x2d4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d00d      	beq.n	8001950 <HAL_GPIO_Init+0x1dc>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a45      	ldr	r2, [pc, #276]	; (8001a4c <HAL_GPIO_Init+0x2d8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d007      	beq.n	800194c <HAL_GPIO_Init+0x1d8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a44      	ldr	r2, [pc, #272]	; (8001a50 <HAL_GPIO_Init+0x2dc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d101      	bne.n	8001948 <HAL_GPIO_Init+0x1d4>
 8001944:	2303      	movs	r3, #3
 8001946:	e006      	b.n	8001956 <HAL_GPIO_Init+0x1e2>
 8001948:	2307      	movs	r3, #7
 800194a:	e004      	b.n	8001956 <HAL_GPIO_Init+0x1e2>
 800194c:	2302      	movs	r3, #2
 800194e:	e002      	b.n	8001956 <HAL_GPIO_Init+0x1e2>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_GPIO_Init+0x1e2>
 8001954:	2300      	movs	r3, #0
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	f002 0203 	and.w	r2, r2, #3
 800195c:	0092      	lsls	r2, r2, #2
 800195e:	4093      	lsls	r3, r2
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001966:	4937      	ldr	r1, [pc, #220]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3302      	adds	r3, #2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001974:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <HAL_GPIO_Init+0x2e0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001998:	4a2e      	ldr	r2, [pc, #184]	; (8001a54 <HAL_GPIO_Init+0x2e0>)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800199e:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <HAL_GPIO_Init+0x2e0>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019c2:	4a24      	ldr	r2, [pc, #144]	; (8001a54 <HAL_GPIO_Init+0x2e0>)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_GPIO_Init+0x2e0>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019ec:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_GPIO_Init+0x2e0>)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_GPIO_Init+0x2e0>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a16:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <HAL_GPIO_Init+0x2e0>)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f47f aea9 	bne.w	8001784 <HAL_GPIO_Init+0x10>
  }
}
 8001a32:	bf00      	nop
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010000 	.word	0x40010000
 8001a48:	48000400 	.word	0x48000400
 8001a4c:	48000800 	.word	0x48000800
 8001a50:	48000c00 	.word	0x48000c00
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe ffd0 	bl	8000a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40007000 	.word	0x40007000

08001ad4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae2:	d130      	bne.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae4:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af0:	d038      	beq.n	8001b64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2232      	movs	r2, #50	; 0x32
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	0c9b      	lsrs	r3, r3, #18
 8001b14:	3301      	adds	r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b18:	e002      	b.n	8001b20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2c:	d102      	bne.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f2      	bne.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b40:	d110      	bne.n	8001b64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e00f      	b.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b52:	d007      	beq.n	8001b64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b5c:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40007000 	.word	0x40007000
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	431bde83 	.word	0x431bde83

08001b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d102      	bne.n	8001b94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f000 bc56 	b.w	8002440 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b94:	4ba1      	ldr	r3, [pc, #644]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b9e:	4b9f      	ldr	r3, [pc, #636]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 80e6 	beq.w	8001d82 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4c>
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	f040 808d 	bne.w	8001cde <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	f040 8089 	bne.w	8001cde <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bcc:	4b93      	ldr	r3, [pc, #588]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <HAL_RCC_OscConfig+0x66>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d102      	bne.n	8001be6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	f000 bc2d 	b.w	8002440 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bea:	4b8c      	ldr	r3, [pc, #560]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d004      	beq.n	8001c00 <HAL_RCC_OscConfig+0x80>
 8001bf6:	4b89      	ldr	r3, [pc, #548]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bfe:	e005      	b.n	8001c0c <HAL_RCC_OscConfig+0x8c>
 8001c00:	4b86      	ldr	r3, [pc, #536]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d224      	bcs.n	8001c5a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fdbd 	bl	8002794 <RCC_SetFlashLatencyFromMSIRange>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f000 bc0d 	b.w	8002440 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c26:	4b7d      	ldr	r3, [pc, #500]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a7c      	ldr	r2, [pc, #496]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4b7a      	ldr	r3, [pc, #488]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	4977      	ldr	r1, [pc, #476]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c44:	4b75      	ldr	r3, [pc, #468]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	4972      	ldr	r1, [pc, #456]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
 8001c58:	e025      	b.n	8001ca6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c5a:	4b70      	ldr	r3, [pc, #448]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6f      	ldr	r2, [pc, #444]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b6d      	ldr	r3, [pc, #436]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	496a      	ldr	r1, [pc, #424]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c78:	4b68      	ldr	r3, [pc, #416]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	4965      	ldr	r1, [pc, #404]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fd7c 	bl	8002794 <RCC_SetFlashLatencyFromMSIRange>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e3cc      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ca6:	f000 fcb3 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 8001caa:	4601      	mov	r1, r0
 8001cac:	4b5b      	ldr	r3, [pc, #364]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	4a5a      	ldr	r2, [pc, #360]	; (8001e20 <HAL_RCC_OscConfig+0x2a0>)
 8001cb8:	5cd3      	ldrb	r3, [r2, r3]
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	fa21 f303 	lsr.w	r3, r1, r3
 8001cc2:	4a58      	ldr	r2, [pc, #352]	; (8001e24 <HAL_RCC_OscConfig+0x2a4>)
 8001cc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cc6:	4b58      	ldr	r3, [pc, #352]	; (8001e28 <HAL_RCC_OscConfig+0x2a8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fa40 	bl	8001150 <HAL_InitTick>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d052      	beq.n	8001d80 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	e3b0      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d032      	beq.n	8001d4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ce6:	4b4d      	ldr	r3, [pc, #308]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a4c      	ldr	r2, [pc, #304]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fa79 	bl	80011e8 <HAL_GetTick>
 8001cf6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fa75 	bl	80011e8 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e399      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d0c:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d18:	4b40      	ldr	r3, [pc, #256]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a3f      	ldr	r2, [pc, #252]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	493a      	ldr	r1, [pc, #232]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d36:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	4935      	ldr	r1, [pc, #212]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	604b      	str	r3, [r1, #4]
 8001d4a:	e01a      	b.n	8001d82 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d4c:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a32      	ldr	r2, [pc, #200]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d58:	f7ff fa46 	bl	80011e8 <HAL_GetTick>
 8001d5c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d60:	f7ff fa42 	bl	80011e8 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e366      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1e0>
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d073      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_OscConfig+0x220>
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d10e      	bne.n	8001db8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d10b      	bne.n	8001db8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d063      	beq.n	8001e74 <HAL_RCC_OscConfig+0x2f4>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d15f      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e343      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc0:	d106      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x250>
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e01d      	b.n	8001e0c <HAL_RCC_OscConfig+0x28c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x274>
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a0c      	ldr	r2, [pc, #48]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0x28c>
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <HAL_RCC_OscConfig+0x29c>)
 8001e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01b      	beq.n	8001e4c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff f9e8 	bl	80011e8 <HAL_GetTick>
 8001e18:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1a:	e010      	b.n	8001e3e <HAL_RCC_OscConfig+0x2be>
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	08004584 	.word	0x08004584
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff f9dc 	bl	80011e8 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e300      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3e:	4ba0      	ldr	r3, [pc, #640]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x2ac>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f9cc 	bl	80011e8 <HAL_GetTick>
 8001e50:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff f9c8 	bl	80011e8 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e2ec      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e66:	4b96      	ldr	r3, [pc, #600]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x2d4>
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d060      	beq.n	8001f44 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_OscConfig+0x314>
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d119      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d116      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e94:	4b8a      	ldr	r3, [pc, #552]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_OscConfig+0x32c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e2c9      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eac:	4b84      	ldr	r3, [pc, #528]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	061b      	lsls	r3, r3, #24
 8001eba:	4981      	ldr	r1, [pc, #516]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec0:	e040      	b.n	8001f44 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d023      	beq.n	8001f12 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eca:	4b7d      	ldr	r3, [pc, #500]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7c      	ldr	r2, [pc, #496]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7ff f987 	bl	80011e8 <HAL_GetTick>
 8001eda:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ede:	f7ff f983 	bl	80011e8 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e2a7      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef0:	4b73      	ldr	r3, [pc, #460]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efc:	4b70      	ldr	r3, [pc, #448]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	061b      	lsls	r3, r3, #24
 8001f0a:	496d      	ldr	r1, [pc, #436]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
 8001f10:	e018      	b.n	8001f44 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f12:	4b6b      	ldr	r3, [pc, #428]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a6a      	ldr	r2, [pc, #424]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7ff f963 	bl	80011e8 <HAL_GetTick>
 8001f22:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f26:	f7ff f95f 	bl	80011e8 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e283      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f38:	4b61      	ldr	r3, [pc, #388]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d07f      	beq.n	8002050 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d05f      	beq.n	8002018 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001f58:	4b59      	ldr	r3, [pc, #356]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d037      	beq.n	8001fde <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e25c      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01b      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001f90:	4b4b      	ldr	r3, [pc, #300]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	4a4a      	ldr	r2, [pc, #296]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fa0:	f7ff f922 	bl	80011e8 <HAL_GetTick>
 8001fa4:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7ff f91e 	bl	80011e8 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b11      	cmp	r3, #17
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e242      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1ef      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001fc8:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fce:	f023 0210 	bic.w	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	493a      	ldr	r1, [pc, #232]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fde:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe4:	4a36      	ldr	r2, [pc, #216]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fee:	f7ff f8fb 	bl	80011e8 <HAL_GetTick>
 8001ff2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff6:	f7ff f8f7 	bl	80011e8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b11      	cmp	r3, #17
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e21b      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 800200a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0ef      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x476>
 8002016:	e01b      	b.n	8002050 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002018:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 800201a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201e:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7ff f8de 	bl	80011e8 <HAL_GetTick>
 800202c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002030:	f7ff f8da 	bl	80011e8 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b11      	cmp	r3, #17
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e1fe      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002042:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8002044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ef      	bne.n	8002030 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80c1 	beq.w	80021e0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10e      	bne.n	800208e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207a:	6593      	str	r3, [r2, #88]	; 0x58
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_RCC_OscConfig+0x540>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002088:	2301      	movs	r3, #1
 800208a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCC_OscConfig+0x544>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_RCC_OscConfig+0x544>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_RCC_OscConfig+0x544>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a6:	f7ff f89f 	bl	80011e8 <HAL_GetTick>
 80020aa:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ac:	e00c      	b.n	80020c8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ae:	f7ff f89b 	bl	80011e8 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d905      	bls.n	80020c8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1bf      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c8:	4bb1      	ldr	r3, [pc, #708]	; (8002390 <HAL_RCC_OscConfig+0x810>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ec      	beq.n	80020ae <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d02c      	beq.n	800213a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80020e0:	4bac      	ldr	r3, [pc, #688]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f2:	49a8      	ldr	r1, [pc, #672]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d010      	beq.n	8002128 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002106:	4ba3      	ldr	r3, [pc, #652]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 8002108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210c:	4aa1      	ldr	r2, [pc, #644]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002116:	4b9f      	ldr	r3, [pc, #636]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	4a9d      	ldr	r2, [pc, #628]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002126:	e018      	b.n	800215a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002128:	4b9a      	ldr	r3, [pc, #616]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	4a99      	ldr	r2, [pc, #612]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002138:	e00f      	b.n	800215a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800213a:	4b96      	ldr	r3, [pc, #600]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	4a94      	ldr	r2, [pc, #592]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 8002142:	f023 0301 	bic.w	r3, r3, #1
 8002146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800214a:	4b92      	ldr	r3, [pc, #584]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002150:	4a90      	ldr	r2, [pc, #576]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 8002152:	f023 0304 	bic.w	r3, r3, #4
 8002156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d016      	beq.n	8002190 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002162:	f7ff f841 	bl	80011e8 <HAL_GetTick>
 8002166:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002168:	e00a      	b.n	8002180 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216a:	f7ff f83d 	bl	80011e8 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f241 3288 	movw	r2, #5000	; 0x1388
 8002178:	4293      	cmp	r3, r2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e15f      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002180:	4b84      	ldr	r3, [pc, #528]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0ed      	beq.n	800216a <HAL_RCC_OscConfig+0x5ea>
 800218e:	e01d      	b.n	80021cc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7ff f82a 	bl	80011e8 <HAL_GetTick>
 8002194:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002196:	e00a      	b.n	80021ae <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7ff f826 	bl	80011e8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e148      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ae:	4b79      	ldr	r3, [pc, #484]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1ed      	bne.n	8002198 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80021bc:	4b75      	ldr	r3, [pc, #468]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c2:	4a74      	ldr	r2, [pc, #464]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 80021c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d4:	4b6f      	ldr	r3, [pc, #444]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	4a6e      	ldr	r2, [pc, #440]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 80021da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d03c      	beq.n	8002266 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01c      	beq.n	800222e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021f4:	4b67      	ldr	r3, [pc, #412]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 80021f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021fa:	4a66      	ldr	r2, [pc, #408]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002204:	f7fe fff0 	bl	80011e8 <HAL_GetTick>
 8002208:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800220c:	f7fe ffec 	bl	80011e8 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e110      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800221e:	4b5d      	ldr	r3, [pc, #372]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 8002220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0ef      	beq.n	800220c <HAL_RCC_OscConfig+0x68c>
 800222c:	e01b      	b.n	8002266 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800222e:	4b59      	ldr	r3, [pc, #356]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 8002230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002234:	4a57      	ldr	r2, [pc, #348]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 8002236:	f023 0301 	bic.w	r3, r3, #1
 800223a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223e:	f7fe ffd3 	bl	80011e8 <HAL_GetTick>
 8002242:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002246:	f7fe ffcf 	bl	80011e8 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e0f3      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002258:	4b4e      	ldr	r3, [pc, #312]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 800225a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ef      	bne.n	8002246 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 80e7 	beq.w	800243e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	2b02      	cmp	r3, #2
 8002276:	f040 80b7 	bne.w	80023e8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800227a:	4b46      	ldr	r3, [pc, #280]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0203 	and.w	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	429a      	cmp	r2, r3
 800228c:	d124      	bne.n	80022d8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002298:	3b01      	subs	r3, #1
 800229a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d11b      	bne.n	80022d8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d113      	bne.n	80022d8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	3b01      	subs	r3, #1
 80022be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d109      	bne.n	80022d8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	085b      	lsrs	r3, r3, #1
 80022d0:	3b01      	subs	r3, #1
 80022d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d061      	beq.n	800239c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d056      	beq.n	800238c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022de:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2c      	ldr	r2, [pc, #176]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 80022e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022ea:	f7fe ff7d 	bl	80011e8 <HAL_GetTick>
 80022ee:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7fe ff79 	bl	80011e8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e09d      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002304:	4b23      	ldr	r3, [pc, #140]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002310:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_RCC_OscConfig+0x818>)
 8002316:	4013      	ands	r3, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002320:	3a01      	subs	r2, #1
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	4311      	orrs	r1, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800232a:	0212      	lsls	r2, r2, #8
 800232c:	4311      	orrs	r1, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002332:	0852      	lsrs	r2, r2, #1
 8002334:	3a01      	subs	r2, #1
 8002336:	0552      	lsls	r2, r2, #21
 8002338:	4311      	orrs	r1, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800233e:	0852      	lsrs	r2, r2, #1
 8002340:	3a01      	subs	r2, #1
 8002342:	0652      	lsls	r2, r2, #25
 8002344:	430a      	orrs	r2, r1
 8002346:	4913      	ldr	r1, [pc, #76]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 8002348:	4313      	orrs	r3, r2
 800234a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a10      	ldr	r2, [pc, #64]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 8002352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002356:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 800235e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002362:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002364:	f7fe ff40 	bl	80011e8 <HAL_GetTick>
 8002368:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7fe ff3c 	bl	80011e8 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e060      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_OscConfig+0x814>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800238a:	e058      	b.n	800243e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e057      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
 8002390:	40007000 	.word	0x40007000
 8002394:	40021000 	.word	0x40021000
 8002398:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <HAL_RCC_OscConfig+0x8c8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d14a      	bne.n	800243e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023a8:	4b27      	ldr	r3, [pc, #156]	; (8002448 <HAL_RCC_OscConfig+0x8c8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a26      	ldr	r2, [pc, #152]	; (8002448 <HAL_RCC_OscConfig+0x8c8>)
 80023ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <HAL_RCC_OscConfig+0x8c8>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a23      	ldr	r2, [pc, #140]	; (8002448 <HAL_RCC_OscConfig+0x8c8>)
 80023ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023c0:	f7fe ff12 	bl	80011e8 <HAL_GetTick>
 80023c4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe ff0e 	bl	80011e8 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e032      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_RCC_OscConfig+0x8c8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x848>
 80023e6:	e02a      	b.n	800243e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d025      	beq.n	800243a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <HAL_RCC_OscConfig+0x8c8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a15      	ldr	r2, [pc, #84]	; (8002448 <HAL_RCC_OscConfig+0x8c8>)
 80023f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023f8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_RCC_OscConfig+0x8c8>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <HAL_RCC_OscConfig+0x8c8>)
 8002400:	f023 0303 	bic.w	r3, r3, #3
 8002404:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <HAL_RCC_OscConfig+0x8c8>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <HAL_RCC_OscConfig+0x8c8>)
 800240c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002410:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe fee9 	bl	80011e8 <HAL_GetTick>
 8002416:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fee5 	bl	80011e8 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e009      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_RCC_OscConfig+0x8c8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f0      	bne.n	800241a <HAL_RCC_OscConfig+0x89a>
 8002438:	e001      	b.n	800243e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3728      	adds	r7, #40	; 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000

0800244c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0c8      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b66      	ldr	r3, [pc, #408]	; (80025fc <HAL_RCC_ClockConfig+0x1b0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d910      	bls.n	8002490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b63      	ldr	r3, [pc, #396]	; (80025fc <HAL_RCC_ClockConfig+0x1b0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 0207 	bic.w	r2, r3, #7
 8002476:	4961      	ldr	r1, [pc, #388]	; (80025fc <HAL_RCC_ClockConfig+0x1b0>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b5f      	ldr	r3, [pc, #380]	; (80025fc <HAL_RCC_ClockConfig+0x1b0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0b0      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d04c      	beq.n	8002536 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a4:	4b56      	ldr	r3, [pc, #344]	; (8002600 <HAL_RCC_ClockConfig+0x1b4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d121      	bne.n	80024f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e09e      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d107      	bne.n	80024cc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024bc:	4b50      	ldr	r3, [pc, #320]	; (8002600 <HAL_RCC_ClockConfig+0x1b4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d115      	bne.n	80024f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e092      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d4:	4b4a      	ldr	r3, [pc, #296]	; (8002600 <HAL_RCC_ClockConfig+0x1b4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d109      	bne.n	80024f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e086      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e4:	4b46      	ldr	r3, [pc, #280]	; (8002600 <HAL_RCC_ClockConfig+0x1b4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e07e      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024f4:	4b42      	ldr	r3, [pc, #264]	; (8002600 <HAL_RCC_ClockConfig+0x1b4>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f023 0203 	bic.w	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	493f      	ldr	r1, [pc, #252]	; (8002600 <HAL_RCC_ClockConfig+0x1b4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002506:	f7fe fe6f 	bl	80011e8 <HAL_GetTick>
 800250a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250c:	e00a      	b.n	8002524 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250e:	f7fe fe6b 	bl	80011e8 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	; 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e066      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002524:	4b36      	ldr	r3, [pc, #216]	; (8002600 <HAL_RCC_ClockConfig+0x1b4>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 020c 	and.w	r2, r3, #12
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	429a      	cmp	r2, r3
 8002534:	d1eb      	bne.n	800250e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002542:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <HAL_RCC_ClockConfig+0x1b4>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	492c      	ldr	r1, [pc, #176]	; (8002600 <HAL_RCC_ClockConfig+0x1b4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002554:	4b29      	ldr	r3, [pc, #164]	; (80025fc <HAL_RCC_ClockConfig+0x1b0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d210      	bcs.n	8002584 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <HAL_RCC_ClockConfig+0x1b0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 0207 	bic.w	r2, r3, #7
 800256a:	4924      	ldr	r1, [pc, #144]	; (80025fc <HAL_RCC_ClockConfig+0x1b0>)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <HAL_RCC_ClockConfig+0x1b0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e036      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002590:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <HAL_RCC_ClockConfig+0x1b4>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4918      	ldr	r1, [pc, #96]	; (8002600 <HAL_RCC_ClockConfig+0x1b4>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <HAL_RCC_ClockConfig+0x1b4>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4910      	ldr	r1, [pc, #64]	; (8002600 <HAL_RCC_ClockConfig+0x1b4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025c2:	f000 f825 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80025c6:	4601      	mov	r1, r0
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <HAL_RCC_ClockConfig+0x1b4>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	4a0c      	ldr	r2, [pc, #48]	; (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	5cd3      	ldrb	r3, [r2, r3]
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	fa21 f303 	lsr.w	r3, r1, r3
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fdb2 	bl	8001150 <HAL_InitTick>
 80025ec:	4603      	mov	r3, r0
 80025ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80025f0:	7afb      	ldrb	r3, [r7, #11]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40022000 	.word	0x40022000
 8002600:	40021000 	.word	0x40021000
 8002604:	08004584 	.word	0x08004584
 8002608:	20000000 	.word	0x20000000
 800260c:	20000008 	.word	0x20000008

08002610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002628:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x34>
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d121      	bne.n	8002682 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d11e      	bne.n	8002682 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002644:	4b33      	ldr	r3, [pc, #204]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d107      	bne.n	8002660 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002650:	4b30      	ldr	r3, [pc, #192]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 8002652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e005      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002660:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800266c:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <HAL_RCC_GetSysClockFreq+0x108>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002674:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10d      	bne.n	8002698 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b04      	cmp	r3, #4
 8002686:	d102      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002688:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_RCC_GetSysClockFreq+0x10c>)
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	e004      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b08      	cmp	r3, #8
 8002692:	d101      	bne.n	8002698 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002694:	4b22      	ldr	r3, [pc, #136]	; (8002720 <HAL_RCC_GetSysClockFreq+0x110>)
 8002696:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b0c      	cmp	r3, #12
 800269c:	d133      	bne.n	8002706 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d002      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0xa4>
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d003      	beq.n	80026ba <HAL_RCC_GetSysClockFreq+0xaa>
 80026b2:	e005      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_RCC_GetSysClockFreq+0x10c>)
 80026b6:	617b      	str	r3, [r7, #20]
      break;
 80026b8:	e005      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_RCC_GetSysClockFreq+0x110>)
 80026bc:	617b      	str	r3, [r7, #20]
      break;
 80026be:	e002      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	617b      	str	r3, [r7, #20]
      break;
 80026c4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026c6:	4b13      	ldr	r3, [pc, #76]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	3301      	adds	r3, #1
 80026d2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	fb02 f203 	mul.w	r2, r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002706:	69bb      	ldr	r3, [r7, #24]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	; 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	0800459c 	.word	0x0800459c
 800271c:	00f42400 	.word	0x00f42400
 8002720:	007a1200 	.word	0x007a1200

08002724 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_RCC_GetHCLKFreq+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000000 	.word	0x20000000

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002740:	f7ff fff0 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8002744:	4601      	mov	r1, r0
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	08004594 	.word	0x08004594

08002768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800276c:	f7ff ffda 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8002770:	4601      	mov	r1, r0
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	0adb      	lsrs	r3, r3, #11
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x28>)
 800277e:	5cd3      	ldrb	r3, [r2, r3]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	08004594 	.word	0x08004594

08002794 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027a0:	4b2a      	ldr	r3, [pc, #168]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027ac:	f7ff f984 	bl	8001ab8 <HAL_PWREx_GetVoltageRange>
 80027b0:	6178      	str	r0, [r7, #20]
 80027b2:	e014      	b.n	80027de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	4a24      	ldr	r2, [pc, #144]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027be:	6593      	str	r3, [r2, #88]	; 0x58
 80027c0:	4b22      	ldr	r3, [pc, #136]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027cc:	f7ff f974 	bl	8001ab8 <HAL_PWREx_GetVoltageRange>
 80027d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027d2:	4b1e      	ldr	r3, [pc, #120]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	4a1d      	ldr	r2, [pc, #116]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e4:	d10b      	bne.n	80027fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b80      	cmp	r3, #128	; 0x80
 80027ea:	d919      	bls.n	8002820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2ba0      	cmp	r3, #160	; 0xa0
 80027f0:	d902      	bls.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027f2:	2302      	movs	r3, #2
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	e013      	b.n	8002820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027f8:	2301      	movs	r3, #1
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	e010      	b.n	8002820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b80      	cmp	r3, #128	; 0x80
 8002802:	d902      	bls.n	800280a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002804:	2303      	movs	r3, #3
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	e00a      	b.n	8002820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b80      	cmp	r3, #128	; 0x80
 800280e:	d102      	bne.n	8002816 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002810:	2302      	movs	r3, #2
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	e004      	b.n	8002820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b70      	cmp	r3, #112	; 0x70
 800281a:	d101      	bne.n	8002820 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800281c:	2301      	movs	r3, #1
 800281e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 0207 	bic.w	r2, r3, #7
 8002828:	4909      	ldr	r1, [pc, #36]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	429a      	cmp	r2, r3
 800283c:	d001      	beq.n	8002842 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	40022000 	.word	0x40022000

08002854 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800285c:	2300      	movs	r3, #0
 800285e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002860:	2300      	movs	r3, #0
 8002862:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 809e 	beq.w	80029ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002876:	4b46      	ldr	r3, [pc, #280]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002886:	2300      	movs	r3, #0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00d      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b40      	ldr	r3, [pc, #256]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	4a3f      	ldr	r2, [pc, #252]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	6593      	str	r3, [r2, #88]	; 0x58
 8002898:	4b3d      	ldr	r3, [pc, #244]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028a8:	4b3a      	ldr	r3, [pc, #232]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a39      	ldr	r2, [pc, #228]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80028ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028b4:	f7fe fc98 	bl	80011e8 <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028ba:	e009      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028bc:	f7fe fc94 	bl	80011e8 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d902      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	74fb      	strb	r3, [r7, #19]
        break;
 80028ce:	e005      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028d0:	4b30      	ldr	r3, [pc, #192]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ef      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d15a      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028e2:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01e      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d019      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028fe:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002908:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800290a:	4b21      	ldr	r3, [pc, #132]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002910:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800292a:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d016      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fc54 	bl	80011e8 <HAL_GetTick>
 8002940:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002942:	e00b      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002944:	f7fe fc50 	bl	80011e8 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d902      	bls.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	74fb      	strb	r3, [r7, #19]
            break;
 800295a:	e006      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0ec      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800296a:	7cfb      	ldrb	r3, [r7, #19]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10b      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002976:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4904      	ldr	r1, [pc, #16]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002986:	e009      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	74bb      	strb	r3, [r7, #18]
 800298c:	e006      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299c:	7c7b      	ldrb	r3, [r7, #17]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a2:	4b6e      	ldr	r3, [pc, #440]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	4a6d      	ldr	r2, [pc, #436]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029ba:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c0:	f023 0203 	bic.w	r2, r3, #3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4964      	ldr	r1, [pc, #400]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029dc:	4b5f      	ldr	r3, [pc, #380]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f023 020c 	bic.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	495c      	ldr	r1, [pc, #368]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029fe:	4b57      	ldr	r3, [pc, #348]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4953      	ldr	r1, [pc, #332]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a20:	4b4e      	ldr	r3, [pc, #312]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	494b      	ldr	r1, [pc, #300]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a42:	4b46      	ldr	r3, [pc, #280]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4942      	ldr	r1, [pc, #264]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a64:	4b3d      	ldr	r3, [pc, #244]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	493a      	ldr	r1, [pc, #232]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a86:	4b35      	ldr	r3, [pc, #212]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	4931      	ldr	r1, [pc, #196]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aa8:	4b2c      	ldr	r3, [pc, #176]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	4929      	ldr	r1, [pc, #164]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aca:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	4920      	ldr	r1, [pc, #128]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d015      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	4918      	ldr	r1, [pc, #96]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b16:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d015      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b24:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	490a      	ldr	r1, [pc, #40]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b42:	d105      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b50:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000

08002b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e040      	b.n	8002bf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe f9da 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2224      	movs	r2, #36	; 0x24
 8002b8c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0201 	bic.w	r2, r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fa84 	bl	80030ac <UART_SetConfig>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e022      	b.n	8002bf4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fd8c 	bl	80036d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fe13 	bl	8003818 <UART_CheckIdleState>
 8002bf2:	4603      	mov	r3, r0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	d144      	bne.n	8002c9c <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_UART_Transmit_IT+0x22>
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e03d      	b.n	8002c9e <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_UART_Transmit_IT+0x34>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e036      	b.n	8002c9e <HAL_UART_Transmit_IT+0xa2>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	88fa      	ldrh	r2, [r7, #6]
 8002c42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2221      	movs	r2, #33	; 0x21
 8002c5e:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c68:	d107      	bne.n	8002c7a <HAL_UART_Transmit_IT+0x7e>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d103      	bne.n	8002c7a <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a0d      	ldr	r2, [pc, #52]	; (8002cac <HAL_UART_Transmit_IT+0xb0>)
 8002c76:	665a      	str	r2, [r3, #100]	; 0x64
 8002c78:	e002      	b.n	8002c80 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4a0c      	ldr	r2, [pc, #48]	; (8002cb0 <HAL_UART_Transmit_IT+0xb4>)
 8002c7e:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c96:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e000      	b.n	8002c9e <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8002c9c:	2302      	movs	r3, #2
  }
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	08003a79 	.word	0x08003a79
 8002cb0:	08003a05 	.word	0x08003a05

08002cb4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	f040 808a 	bne.w	8002de0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_UART_Receive_IT+0x24>
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e082      	b.n	8002de2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Receive_IT+0x36>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e07b      	b.n	8002de2 <HAL_UART_Receive_IT+0x12e>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	88fa      	ldrh	r2, [r7, #6]
 8002cfc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	88fa      	ldrh	r2, [r7, #6]
 8002d04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d16:	d10e      	bne.n	8002d36 <HAL_UART_Receive_IT+0x82>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_UART_Receive_IT+0x78>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d2a:	e02d      	b.n	8002d88 <HAL_UART_Receive_IT+0xd4>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	22ff      	movs	r2, #255	; 0xff
 8002d30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d34:	e028      	b.n	8002d88 <HAL_UART_Receive_IT+0xd4>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10d      	bne.n	8002d5a <HAL_UART_Receive_IT+0xa6>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <HAL_UART_Receive_IT+0x9c>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	22ff      	movs	r2, #255	; 0xff
 8002d4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d4e:	e01b      	b.n	8002d88 <HAL_UART_Receive_IT+0xd4>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	227f      	movs	r2, #127	; 0x7f
 8002d54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d58:	e016      	b.n	8002d88 <HAL_UART_Receive_IT+0xd4>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d62:	d10d      	bne.n	8002d80 <HAL_UART_Receive_IT+0xcc>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d104      	bne.n	8002d76 <HAL_UART_Receive_IT+0xc2>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	227f      	movs	r2, #127	; 0x7f
 8002d70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d74:	e008      	b.n	8002d88 <HAL_UART_Receive_IT+0xd4>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	223f      	movs	r2, #63	; 0x3f
 8002d7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d7e:	e003      	b.n	8002d88 <HAL_UART_Receive_IT+0xd4>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2222      	movs	r2, #34	; 0x22
 8002d92:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dac:	d107      	bne.n	8002dbe <HAL_UART_Receive_IT+0x10a>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <HAL_UART_Receive_IT+0x13c>)
 8002dba:	661a      	str	r2, [r3, #96]	; 0x60
 8002dbc:	e002      	b.n	8002dc4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4a0c      	ldr	r2, [pc, #48]	; (8002df4 <HAL_UART_Receive_IT+0x140>)
 8002dc2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002dda:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e000      	b.n	8002de2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8002de0:	2302      	movs	r3, #2
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	08003bd1 	.word	0x08003bd1
 8002df4:	08003b27 	.word	0x08003b27

08002df8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d113      	bne.n	8002e50 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00e      	beq.n	8002e50 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d009      	beq.n	8002e50 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8114 	beq.w	800306e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	4798      	blx	r3
      }
      return;
 8002e4e:	e10e      	b.n	800306e <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80d6 	beq.w	8003004 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d105      	bne.n	8002e6e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80cb 	beq.w	8003004 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00e      	beq.n	8002e96 <HAL_UART_IRQHandler+0x9e>
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d009      	beq.n	8002e96 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2201      	movs	r2, #1
 8002e88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e8e:	f043 0201 	orr.w	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00e      	beq.n	8002ebe <HAL_UART_IRQHandler+0xc6>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb6:	f043 0204 	orr.w	r2, r3, #4
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_UART_IRQHandler+0xee>
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ede:	f043 0202 	orr.w	r2, r3, #2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d013      	beq.n	8002f18 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2208      	movs	r2, #8
 8002f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f10:	f043 0208 	orr.w	r2, r3, #8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00f      	beq.n	8002f42 <HAL_UART_IRQHandler+0x14a>
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8093 	beq.w	8003072 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00c      	beq.n	8002f70 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f74:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	d004      	beq.n	8002f8e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d031      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fd02 	bl	8003998 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d123      	bne.n	8002fea <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d013      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fbe:	4a30      	ldr	r2, [pc, #192]	; (8003080 <HAL_UART_IRQHandler+0x288>)
 8002fc0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe fae4 	bl	8001594 <HAL_DMA_Abort_IT>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d016      	beq.n	8003000 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe0:	e00e      	b.n	8003000 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f858 	bl	8003098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe8:	e00a      	b.n	8003000 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f854 	bl	8003098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff0:	e006      	b.n	8003000 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f850 	bl	8003098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002ffe:	e038      	b.n	8003072 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003000:	bf00      	nop
    return;
 8003002:	e036      	b.n	8003072 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00d      	beq.n	800302a <HAL_UART_IRQHandler+0x232>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003020:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fe29 	bl	8003c7a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003028:	e026      	b.n	8003078 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00d      	beq.n	8003050 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303a:	2b00      	cmp	r3, #0
 800303c:	d008      	beq.n	8003050 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003042:	2b00      	cmp	r3, #0
 8003044:	d017      	beq.n	8003076 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
    }
    return;
 800304e:	e012      	b.n	8003076 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00e      	beq.n	8003078 <HAL_UART_IRQHandler+0x280>
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d009      	beq.n	8003078 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fd45 	bl	8003af4 <UART_EndTransmit_IT>
    return;
 800306a:	bf00      	nop
 800306c:	e004      	b.n	8003078 <HAL_UART_IRQHandler+0x280>
      return;
 800306e:	bf00      	nop
 8003070:	e002      	b.n	8003078 <HAL_UART_IRQHandler+0x280>
    return;
 8003072:	bf00      	nop
 8003074:	e000      	b.n	8003078 <HAL_UART_IRQHandler+0x280>
    return;
 8003076:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	080039d9 	.word	0x080039d9

08003084 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030ac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80030b0:	b08a      	sub	sp, #40	; 0x28
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4bbc      	ldr	r3, [pc, #752]	; (80033d4 <UART_SetConfig+0x328>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ea:	430b      	orrs	r3, r1
 80030ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4ab2      	ldr	r2, [pc, #712]	; (80033d8 <UART_SetConfig+0x32c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311a:	4313      	orrs	r3, r2
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4aa9      	ldr	r2, [pc, #676]	; (80033dc <UART_SetConfig+0x330>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d126      	bne.n	800318a <UART_SetConfig+0xde>
 800313c:	4ba8      	ldr	r3, [pc, #672]	; (80033e0 <UART_SetConfig+0x334>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b03      	cmp	r3, #3
 8003148:	d81a      	bhi.n	8003180 <UART_SetConfig+0xd4>
 800314a:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <UART_SetConfig+0xa4>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	08003161 	.word	0x08003161
 8003154:	08003171 	.word	0x08003171
 8003158:	08003169 	.word	0x08003169
 800315c:	08003179 	.word	0x08003179
 8003160:	2301      	movs	r3, #1
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003166:	e0ab      	b.n	80032c0 <UART_SetConfig+0x214>
 8003168:	2302      	movs	r3, #2
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316e:	e0a7      	b.n	80032c0 <UART_SetConfig+0x214>
 8003170:	2304      	movs	r3, #4
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003176:	e0a3      	b.n	80032c0 <UART_SetConfig+0x214>
 8003178:	2308      	movs	r3, #8
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317e:	e09f      	b.n	80032c0 <UART_SetConfig+0x214>
 8003180:	2310      	movs	r3, #16
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	bf00      	nop
 8003188:	e09a      	b.n	80032c0 <UART_SetConfig+0x214>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a95      	ldr	r2, [pc, #596]	; (80033e4 <UART_SetConfig+0x338>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d138      	bne.n	8003206 <UART_SetConfig+0x15a>
 8003194:	4b92      	ldr	r3, [pc, #584]	; (80033e0 <UART_SetConfig+0x334>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b0c      	cmp	r3, #12
 80031a0:	d82c      	bhi.n	80031fc <UART_SetConfig+0x150>
 80031a2:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <UART_SetConfig+0xfc>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	080031dd 	.word	0x080031dd
 80031ac:	080031fd 	.word	0x080031fd
 80031b0:	080031fd 	.word	0x080031fd
 80031b4:	080031fd 	.word	0x080031fd
 80031b8:	080031ed 	.word	0x080031ed
 80031bc:	080031fd 	.word	0x080031fd
 80031c0:	080031fd 	.word	0x080031fd
 80031c4:	080031fd 	.word	0x080031fd
 80031c8:	080031e5 	.word	0x080031e5
 80031cc:	080031fd 	.word	0x080031fd
 80031d0:	080031fd 	.word	0x080031fd
 80031d4:	080031fd 	.word	0x080031fd
 80031d8:	080031f5 	.word	0x080031f5
 80031dc:	2300      	movs	r3, #0
 80031de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e2:	e06d      	b.n	80032c0 <UART_SetConfig+0x214>
 80031e4:	2302      	movs	r3, #2
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ea:	e069      	b.n	80032c0 <UART_SetConfig+0x214>
 80031ec:	2304      	movs	r3, #4
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f2:	e065      	b.n	80032c0 <UART_SetConfig+0x214>
 80031f4:	2308      	movs	r3, #8
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fa:	e061      	b.n	80032c0 <UART_SetConfig+0x214>
 80031fc:	2310      	movs	r3, #16
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003202:	bf00      	nop
 8003204:	e05c      	b.n	80032c0 <UART_SetConfig+0x214>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a77      	ldr	r2, [pc, #476]	; (80033e8 <UART_SetConfig+0x33c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d125      	bne.n	800325c <UART_SetConfig+0x1b0>
 8003210:	4b73      	ldr	r3, [pc, #460]	; (80033e0 <UART_SetConfig+0x334>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800321a:	2b10      	cmp	r3, #16
 800321c:	d011      	beq.n	8003242 <UART_SetConfig+0x196>
 800321e:	2b10      	cmp	r3, #16
 8003220:	d802      	bhi.n	8003228 <UART_SetConfig+0x17c>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <UART_SetConfig+0x186>
 8003226:	e014      	b.n	8003252 <UART_SetConfig+0x1a6>
 8003228:	2b20      	cmp	r3, #32
 800322a:	d006      	beq.n	800323a <UART_SetConfig+0x18e>
 800322c:	2b30      	cmp	r3, #48	; 0x30
 800322e:	d00c      	beq.n	800324a <UART_SetConfig+0x19e>
 8003230:	e00f      	b.n	8003252 <UART_SetConfig+0x1a6>
 8003232:	2300      	movs	r3, #0
 8003234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003238:	e042      	b.n	80032c0 <UART_SetConfig+0x214>
 800323a:	2302      	movs	r3, #2
 800323c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003240:	e03e      	b.n	80032c0 <UART_SetConfig+0x214>
 8003242:	2304      	movs	r3, #4
 8003244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003248:	e03a      	b.n	80032c0 <UART_SetConfig+0x214>
 800324a:	2308      	movs	r3, #8
 800324c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003250:	e036      	b.n	80032c0 <UART_SetConfig+0x214>
 8003252:	2310      	movs	r3, #16
 8003254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003258:	bf00      	nop
 800325a:	e031      	b.n	80032c0 <UART_SetConfig+0x214>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a5d      	ldr	r2, [pc, #372]	; (80033d8 <UART_SetConfig+0x32c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d129      	bne.n	80032ba <UART_SetConfig+0x20e>
 8003266:	4b5e      	ldr	r3, [pc, #376]	; (80033e0 <UART_SetConfig+0x334>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003274:	d014      	beq.n	80032a0 <UART_SetConfig+0x1f4>
 8003276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327a:	d802      	bhi.n	8003282 <UART_SetConfig+0x1d6>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <UART_SetConfig+0x1e4>
 8003280:	e016      	b.n	80032b0 <UART_SetConfig+0x204>
 8003282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003286:	d007      	beq.n	8003298 <UART_SetConfig+0x1ec>
 8003288:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800328c:	d00c      	beq.n	80032a8 <UART_SetConfig+0x1fc>
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x204>
 8003290:	2300      	movs	r3, #0
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003296:	e013      	b.n	80032c0 <UART_SetConfig+0x214>
 8003298:	2302      	movs	r3, #2
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329e:	e00f      	b.n	80032c0 <UART_SetConfig+0x214>
 80032a0:	2304      	movs	r3, #4
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a6:	e00b      	b.n	80032c0 <UART_SetConfig+0x214>
 80032a8:	2308      	movs	r3, #8
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ae:	e007      	b.n	80032c0 <UART_SetConfig+0x214>
 80032b0:	2310      	movs	r3, #16
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b6:	bf00      	nop
 80032b8:	e002      	b.n	80032c0 <UART_SetConfig+0x214>
 80032ba:	2310      	movs	r3, #16
 80032bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a44      	ldr	r2, [pc, #272]	; (80033d8 <UART_SetConfig+0x32c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f040 80fb 	bne.w	80034c2 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d824      	bhi.n	800331e <UART_SetConfig+0x272>
 80032d4:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <UART_SetConfig+0x230>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003301 	.word	0x08003301
 80032e0:	0800331f 	.word	0x0800331f
 80032e4:	08003309 	.word	0x08003309
 80032e8:	0800331f 	.word	0x0800331f
 80032ec:	0800330f 	.word	0x0800330f
 80032f0:	0800331f 	.word	0x0800331f
 80032f4:	0800331f 	.word	0x0800331f
 80032f8:	0800331f 	.word	0x0800331f
 80032fc:	08003317 	.word	0x08003317
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003300:	f7ff fa1c 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8003304:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003306:	e00d      	b.n	8003324 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003308:	4b38      	ldr	r3, [pc, #224]	; (80033ec <UART_SetConfig+0x340>)
 800330a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800330c:	e00a      	b.n	8003324 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800330e:	f7ff f97f 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 8003312:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003314:	e006      	b.n	8003324 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800331c:	e002      	b.n	8003324 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	76fb      	strb	r3, [r7, #27]
        break;
 8003322:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 81c8 	beq.w	80036bc <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	429a      	cmp	r2, r3
 800333a:	d305      	bcc.n	8003348 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	429a      	cmp	r2, r3
 8003346:	d902      	bls.n	800334e <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	76fb      	strb	r3, [r7, #27]
 800334c:	e1b6      	b.n	80036bc <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 800334e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003352:	2b08      	cmp	r3, #8
 8003354:	f200 80a2 	bhi.w	800349c <UART_SetConfig+0x3f0>
 8003358:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <UART_SetConfig+0x2b4>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003385 	.word	0x08003385
 8003364:	0800349d 	.word	0x0800349d
 8003368:	080033f1 	.word	0x080033f1
 800336c:	0800349d 	.word	0x0800349d
 8003370:	08003425 	.word	0x08003425
 8003374:	0800349d 	.word	0x0800349d
 8003378:	0800349d 	.word	0x0800349d
 800337c:	0800349d 	.word	0x0800349d
 8003380:	08003473 	.word	0x08003473
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003384:	f7ff f9da 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8003388:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4619      	mov	r1, r3
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	f04f 0400 	mov.w	r4, #0
 800339a:	0214      	lsls	r4, r2, #8
 800339c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80033a0:	020b      	lsls	r3, r1, #8
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6852      	ldr	r2, [r2, #4]
 80033a6:	0852      	lsrs	r2, r2, #1
 80033a8:	4611      	mov	r1, r2
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	eb13 0b01 	adds.w	fp, r3, r1
 80033b2:	eb44 0c02 	adc.w	ip, r4, r2
 80033b6:	4658      	mov	r0, fp
 80033b8:	4661      	mov	r1, ip
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f04f 0400 	mov.w	r4, #0
 80033c2:	461a      	mov	r2, r3
 80033c4:	4623      	mov	r3, r4
 80033c6:	f7fc ff5b 	bl	8000280 <__aeabi_uldivmod>
 80033ca:	4603      	mov	r3, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80033d0:	e067      	b.n	80034a2 <UART_SetConfig+0x3f6>
 80033d2:	bf00      	nop
 80033d4:	efff69f3 	.word	0xefff69f3
 80033d8:	40008000 	.word	0x40008000
 80033dc:	40013800 	.word	0x40013800
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40004400 	.word	0x40004400
 80033e8:	40004800 	.word	0x40004800
 80033ec:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	085b      	lsrs	r3, r3, #1
 80033f6:	f04f 0400 	mov.w	r4, #0
 80033fa:	49ae      	ldr	r1, [pc, #696]	; (80036b4 <UART_SetConfig+0x608>)
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	eb13 0b01 	adds.w	fp, r3, r1
 8003404:	eb44 0c02 	adc.w	ip, r4, r2
 8003408:	4658      	mov	r0, fp
 800340a:	4661      	mov	r1, ip
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f04f 0400 	mov.w	r4, #0
 8003414:	461a      	mov	r2, r3
 8003416:	4623      	mov	r3, r4
 8003418:	f7fc ff32 	bl	8000280 <__aeabi_uldivmod>
 800341c:	4603      	mov	r3, r0
 800341e:	460c      	mov	r4, r1
 8003420:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003422:	e03e      	b.n	80034a2 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003424:	f7ff f8f4 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 8003428:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4619      	mov	r1, r3
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	f04f 0400 	mov.w	r4, #0
 800343a:	0214      	lsls	r4, r2, #8
 800343c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003440:	020b      	lsls	r3, r1, #8
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6852      	ldr	r2, [r2, #4]
 8003446:	0852      	lsrs	r2, r2, #1
 8003448:	4611      	mov	r1, r2
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	eb13 0b01 	adds.w	fp, r3, r1
 8003452:	eb44 0c02 	adc.w	ip, r4, r2
 8003456:	4658      	mov	r0, fp
 8003458:	4661      	mov	r1, ip
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f04f 0400 	mov.w	r4, #0
 8003462:	461a      	mov	r2, r3
 8003464:	4623      	mov	r3, r4
 8003466:	f7fc ff0b 	bl	8000280 <__aeabi_uldivmod>
 800346a:	4603      	mov	r3, r0
 800346c:	460c      	mov	r4, r1
 800346e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003470:	e017      	b.n	80034a2 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	f04f 0400 	mov.w	r4, #0
 800347c:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003480:	f144 0100 	adc.w	r1, r4, #0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f04f 0400 	mov.w	r4, #0
 800348c:	461a      	mov	r2, r3
 800348e:	4623      	mov	r3, r4
 8003490:	f7fc fef6 	bl	8000280 <__aeabi_uldivmod>
 8003494:	4603      	mov	r3, r0
 8003496:	460c      	mov	r4, r1
 8003498:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800349a:	e002      	b.n	80034a2 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	76fb      	strb	r3, [r7, #27]
            break;
 80034a0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034a8:	d308      	bcc.n	80034bc <UART_SetConfig+0x410>
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b0:	d204      	bcs.n	80034bc <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	e0ff      	b.n	80036bc <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	76fb      	strb	r3, [r7, #27]
 80034c0:	e0fc      	b.n	80036bc <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ca:	f040 8083 	bne.w	80035d4 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 80034ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d85e      	bhi.n	8003594 <UART_SetConfig+0x4e8>
 80034d6:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <UART_SetConfig+0x430>)
 80034d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034dc:	08003501 	.word	0x08003501
 80034e0:	08003521 	.word	0x08003521
 80034e4:	08003541 	.word	0x08003541
 80034e8:	08003595 	.word	0x08003595
 80034ec:	0800355d 	.word	0x0800355d
 80034f0:	08003595 	.word	0x08003595
 80034f4:	08003595 	.word	0x08003595
 80034f8:	08003595 	.word	0x08003595
 80034fc:	0800357d 	.word	0x0800357d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003500:	f7ff f91c 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8003504:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	005a      	lsls	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	085b      	lsrs	r3, r3, #1
 8003510:	441a      	add	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	fbb2 f3f3 	udiv	r3, r2, r3
 800351a:	b29b      	uxth	r3, r3
 800351c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800351e:	e03c      	b.n	800359a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003520:	f7ff f922 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8003524:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	005a      	lsls	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	441a      	add	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	fbb2 f3f3 	udiv	r3, r2, r3
 800353a:	b29b      	uxth	r3, r3
 800353c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800353e:	e02c      	b.n	800359a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	085b      	lsrs	r3, r3, #1
 8003546:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800354a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6852      	ldr	r2, [r2, #4]
 8003552:	fbb3 f3f2 	udiv	r3, r3, r2
 8003556:	b29b      	uxth	r3, r3
 8003558:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800355a:	e01e      	b.n	800359a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800355c:	f7ff f858 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 8003560:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	005a      	lsls	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	441a      	add	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	b29b      	uxth	r3, r3
 8003578:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800357a:	e00e      	b.n	800359a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	fbb2 f3f3 	udiv	r3, r2, r3
 800358e:	b29b      	uxth	r3, r3
 8003590:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003592:	e002      	b.n	800359a <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	76fb      	strb	r3, [r7, #27]
        break;
 8003598:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	2b0f      	cmp	r3, #15
 800359e:	d916      	bls.n	80035ce <UART_SetConfig+0x522>
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a6:	d212      	bcs.n	80035ce <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f023 030f 	bic.w	r3, r3, #15
 80035b0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	b29a      	uxth	r2, r3
 80035be:	89fb      	ldrh	r3, [r7, #14]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	89fa      	ldrh	r2, [r7, #14]
 80035ca:	60da      	str	r2, [r3, #12]
 80035cc:	e076      	b.n	80036bc <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	76fb      	strb	r3, [r7, #27]
 80035d2:	e073      	b.n	80036bc <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 80035d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d85c      	bhi.n	8003696 <UART_SetConfig+0x5ea>
 80035dc:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <UART_SetConfig+0x538>)
 80035de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e2:	bf00      	nop
 80035e4:	08003609 	.word	0x08003609
 80035e8:	08003627 	.word	0x08003627
 80035ec:	08003645 	.word	0x08003645
 80035f0:	08003697 	.word	0x08003697
 80035f4:	08003661 	.word	0x08003661
 80035f8:	08003697 	.word	0x08003697
 80035fc:	08003697 	.word	0x08003697
 8003600:	08003697 	.word	0x08003697
 8003604:	0800367f 	.word	0x0800367f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003608:	f7ff f898 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 800360c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	085a      	lsrs	r2, r3, #1
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	441a      	add	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	b29b      	uxth	r3, r3
 8003622:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003624:	e03a      	b.n	800369c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003626:	f7ff f89f 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 800362a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	085a      	lsrs	r2, r3, #1
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	441a      	add	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	b29b      	uxth	r3, r3
 8003640:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003642:	e02b      	b.n	800369c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800364e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6852      	ldr	r2, [r2, #4]
 8003656:	fbb3 f3f2 	udiv	r3, r3, r2
 800365a:	b29b      	uxth	r3, r3
 800365c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800365e:	e01d      	b.n	800369c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003660:	f7fe ffd6 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 8003664:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	085a      	lsrs	r2, r3, #1
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	441a      	add	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	b29b      	uxth	r3, r3
 800367a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800367c:	e00e      	b.n	800369c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003690:	b29b      	uxth	r3, r3
 8003692:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003694:	e002      	b.n	800369c <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	76fb      	strb	r3, [r7, #27]
        break;
 800369a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b0f      	cmp	r3, #15
 80036a0:	d90a      	bls.n	80036b8 <UART_SetConfig+0x60c>
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a8:	d206      	bcs.n	80036b8 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	e003      	b.n	80036bc <UART_SetConfig+0x610>
 80036b4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80036c8:	7efb      	ldrb	r3, [r7, #27]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3728      	adds	r7, #40	; 0x28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080036d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01a      	beq.n	80037ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d2:	d10a      	bne.n	80037ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	605a      	str	r2, [r3, #4]
  }
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af02      	add	r7, sp, #8
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003826:	f7fd fcdf 	bl	80011e8 <HAL_GetTick>
 800382a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b08      	cmp	r3, #8
 8003838:	d10e      	bne.n	8003858 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800383a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f82a 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e020      	b.n	800389a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b04      	cmp	r3, #4
 8003864:	d10e      	bne.n	8003884 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003866:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f814 	bl	80038a2 <UART_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e00a      	b.n	800389a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	4613      	mov	r3, r2
 80038b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b2:	e05d      	b.n	8003970 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ba:	d059      	beq.n	8003970 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038bc:	f7fd fc94 	bl	80011e8 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d302      	bcc.n	80038d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11b      	bne.n	800390a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038e0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e042      	b.n	8003990 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02b      	beq.n	8003970 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003926:	d123      	bne.n	8003970 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003930:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003940:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e00f      	b.n	8003990 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69da      	ldr	r2, [r3, #28]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4013      	ands	r3, r2
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	429a      	cmp	r2, r3
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	429a      	cmp	r2, r3
 800398c:	d092      	beq.n	80038b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0201 	bic.w	r2, r2, #1
 80039be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	661a      	str	r2, [r3, #96]	; 0x60
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7ff fb4e 	bl	8003098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a10:	2b21      	cmp	r3, #33	; 0x21
 8003a12:	d12b      	bne.n	8003a6c <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d110      	bne.n	8003a42 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a2e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a3e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003a40:	e014      	b.n	8003a6c <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a46:	781a      	ldrb	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	b292      	uxth	r2, r2
 8003a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a84:	2b21      	cmp	r3, #33	; 0x21
 8003a86:	d12f      	bne.n	8003ae8 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d110      	bne.n	8003ab6 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ab2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003ab4:	e018      	b.n	8003ae8 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	881a      	ldrh	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac8:	b292      	uxth	r2, r2
 8003aca:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad0:	1c9a      	adds	r2, r3, #2
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff fab3 	bl	8003084 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b34:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b3a:	2b22      	cmp	r3, #34	; 0x22
 8003b3c:	d13a      	bne.n	8003bb4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b44:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b46:	89bb      	ldrh	r3, [r7, #12]
 8003b48:	b2d9      	uxtb	r1, r3
 8003b4a:	89fb      	ldrh	r3, [r7, #14]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	400a      	ands	r2, r1
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d123      	bne.n	8003bc8 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b8e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7fc ff5b 	bl	8000a68 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bb2:	e009      	b.n	8003bc8 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	8b1b      	ldrh	r3, [r3, #24]
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0208 	orr.w	r2, r2, #8
 8003bc4:	b292      	uxth	r2, r2
 8003bc6:	831a      	strh	r2, [r3, #24]
}
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003bde:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003be4:	2b22      	cmp	r3, #34	; 0x22
 8003be6:	d13a      	bne.n	8003c5e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003bee:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003bf6:	89ba      	ldrh	r2, [r7, #12]
 8003bf8:	89fb      	ldrh	r3, [r7, #14]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	1c9a      	adds	r2, r3, #2
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d123      	bne.n	8003c72 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c38:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0201 	bic.w	r2, r2, #1
 8003c48:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fc ff06 	bl	8000a68 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c5c:	e009      	b.n	8003c72 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	8b1b      	ldrh	r3, [r3, #24]
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0208 	orr.w	r2, r2, #8
 8003c6e:	b292      	uxth	r2, r2
 8003c70:	831a      	strh	r2, [r3, #24]
}
 8003c72:	bf00      	nop
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <__errno>:
 8003c90:	4b01      	ldr	r3, [pc, #4]	; (8003c98 <__errno+0x8>)
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000010 	.word	0x20000010

08003c9c <__libc_init_array>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	4e0d      	ldr	r6, [pc, #52]	; (8003cd4 <__libc_init_array+0x38>)
 8003ca0:	4c0d      	ldr	r4, [pc, #52]	; (8003cd8 <__libc_init_array+0x3c>)
 8003ca2:	1ba4      	subs	r4, r4, r6
 8003ca4:	10a4      	asrs	r4, r4, #2
 8003ca6:	2500      	movs	r5, #0
 8003ca8:	42a5      	cmp	r5, r4
 8003caa:	d109      	bne.n	8003cc0 <__libc_init_array+0x24>
 8003cac:	4e0b      	ldr	r6, [pc, #44]	; (8003cdc <__libc_init_array+0x40>)
 8003cae:	4c0c      	ldr	r4, [pc, #48]	; (8003ce0 <__libc_init_array+0x44>)
 8003cb0:	f000 fc3a 	bl	8004528 <_init>
 8003cb4:	1ba4      	subs	r4, r4, r6
 8003cb6:	10a4      	asrs	r4, r4, #2
 8003cb8:	2500      	movs	r5, #0
 8003cba:	42a5      	cmp	r5, r4
 8003cbc:	d105      	bne.n	8003cca <__libc_init_array+0x2e>
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cc4:	4798      	blx	r3
 8003cc6:	3501      	adds	r5, #1
 8003cc8:	e7ee      	b.n	8003ca8 <__libc_init_array+0xc>
 8003cca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cce:	4798      	blx	r3
 8003cd0:	3501      	adds	r5, #1
 8003cd2:	e7f2      	b.n	8003cba <__libc_init_array+0x1e>
 8003cd4:	08004610 	.word	0x08004610
 8003cd8:	08004610 	.word	0x08004610
 8003cdc:	08004610 	.word	0x08004610
 8003ce0:	08004614 	.word	0x08004614

08003ce4 <memset>:
 8003ce4:	4402      	add	r2, r0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d100      	bne.n	8003cee <memset+0xa>
 8003cec:	4770      	bx	lr
 8003cee:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf2:	e7f9      	b.n	8003ce8 <memset+0x4>

08003cf4 <sniprintf>:
 8003cf4:	b40c      	push	{r2, r3}
 8003cf6:	b530      	push	{r4, r5, lr}
 8003cf8:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <sniprintf+0x64>)
 8003cfa:	1e0c      	subs	r4, r1, #0
 8003cfc:	b09d      	sub	sp, #116	; 0x74
 8003cfe:	681d      	ldr	r5, [r3, #0]
 8003d00:	da08      	bge.n	8003d14 <sniprintf+0x20>
 8003d02:	238b      	movs	r3, #139	; 0x8b
 8003d04:	602b      	str	r3, [r5, #0]
 8003d06:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0a:	b01d      	add	sp, #116	; 0x74
 8003d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d10:	b002      	add	sp, #8
 8003d12:	4770      	bx	lr
 8003d14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003d18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003d1c:	bf14      	ite	ne
 8003d1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003d22:	4623      	moveq	r3, r4
 8003d24:	9304      	str	r3, [sp, #16]
 8003d26:	9307      	str	r3, [sp, #28]
 8003d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d2c:	9002      	str	r0, [sp, #8]
 8003d2e:	9006      	str	r0, [sp, #24]
 8003d30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003d34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003d36:	ab21      	add	r3, sp, #132	; 0x84
 8003d38:	a902      	add	r1, sp, #8
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	9301      	str	r3, [sp, #4]
 8003d3e:	f000 f867 	bl	8003e10 <_svfiprintf_r>
 8003d42:	1c43      	adds	r3, r0, #1
 8003d44:	bfbc      	itt	lt
 8003d46:	238b      	movlt	r3, #139	; 0x8b
 8003d48:	602b      	strlt	r3, [r5, #0]
 8003d4a:	2c00      	cmp	r4, #0
 8003d4c:	d0dd      	beq.n	8003d0a <sniprintf+0x16>
 8003d4e:	9b02      	ldr	r3, [sp, #8]
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	e7d9      	b.n	8003d0a <sniprintf+0x16>
 8003d56:	bf00      	nop
 8003d58:	20000010 	.word	0x20000010

08003d5c <__ssputs_r>:
 8003d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d60:	688e      	ldr	r6, [r1, #8]
 8003d62:	429e      	cmp	r6, r3
 8003d64:	4682      	mov	sl, r0
 8003d66:	460c      	mov	r4, r1
 8003d68:	4690      	mov	r8, r2
 8003d6a:	4699      	mov	r9, r3
 8003d6c:	d837      	bhi.n	8003dde <__ssputs_r+0x82>
 8003d6e:	898a      	ldrh	r2, [r1, #12]
 8003d70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d74:	d031      	beq.n	8003dda <__ssputs_r+0x7e>
 8003d76:	6825      	ldr	r5, [r4, #0]
 8003d78:	6909      	ldr	r1, [r1, #16]
 8003d7a:	1a6f      	subs	r7, r5, r1
 8003d7c:	6965      	ldr	r5, [r4, #20]
 8003d7e:	2302      	movs	r3, #2
 8003d80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d84:	fb95 f5f3 	sdiv	r5, r5, r3
 8003d88:	f109 0301 	add.w	r3, r9, #1
 8003d8c:	443b      	add	r3, r7
 8003d8e:	429d      	cmp	r5, r3
 8003d90:	bf38      	it	cc
 8003d92:	461d      	movcc	r5, r3
 8003d94:	0553      	lsls	r3, r2, #21
 8003d96:	d530      	bpl.n	8003dfa <__ssputs_r+0x9e>
 8003d98:	4629      	mov	r1, r5
 8003d9a:	f000 fb2b 	bl	80043f4 <_malloc_r>
 8003d9e:	4606      	mov	r6, r0
 8003da0:	b950      	cbnz	r0, 8003db8 <__ssputs_r+0x5c>
 8003da2:	230c      	movs	r3, #12
 8003da4:	f8ca 3000 	str.w	r3, [sl]
 8003da8:	89a3      	ldrh	r3, [r4, #12]
 8003daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dae:	81a3      	strh	r3, [r4, #12]
 8003db0:	f04f 30ff 	mov.w	r0, #4294967295
 8003db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db8:	463a      	mov	r2, r7
 8003dba:	6921      	ldr	r1, [r4, #16]
 8003dbc:	f000 faa8 	bl	8004310 <memcpy>
 8003dc0:	89a3      	ldrh	r3, [r4, #12]
 8003dc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dca:	81a3      	strh	r3, [r4, #12]
 8003dcc:	6126      	str	r6, [r4, #16]
 8003dce:	6165      	str	r5, [r4, #20]
 8003dd0:	443e      	add	r6, r7
 8003dd2:	1bed      	subs	r5, r5, r7
 8003dd4:	6026      	str	r6, [r4, #0]
 8003dd6:	60a5      	str	r5, [r4, #8]
 8003dd8:	464e      	mov	r6, r9
 8003dda:	454e      	cmp	r6, r9
 8003ddc:	d900      	bls.n	8003de0 <__ssputs_r+0x84>
 8003dde:	464e      	mov	r6, r9
 8003de0:	4632      	mov	r2, r6
 8003de2:	4641      	mov	r1, r8
 8003de4:	6820      	ldr	r0, [r4, #0]
 8003de6:	f000 fa9e 	bl	8004326 <memmove>
 8003dea:	68a3      	ldr	r3, [r4, #8]
 8003dec:	1b9b      	subs	r3, r3, r6
 8003dee:	60a3      	str	r3, [r4, #8]
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	441e      	add	r6, r3
 8003df4:	6026      	str	r6, [r4, #0]
 8003df6:	2000      	movs	r0, #0
 8003df8:	e7dc      	b.n	8003db4 <__ssputs_r+0x58>
 8003dfa:	462a      	mov	r2, r5
 8003dfc:	f000 fb54 	bl	80044a8 <_realloc_r>
 8003e00:	4606      	mov	r6, r0
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d1e2      	bne.n	8003dcc <__ssputs_r+0x70>
 8003e06:	6921      	ldr	r1, [r4, #16]
 8003e08:	4650      	mov	r0, sl
 8003e0a:	f000 faa5 	bl	8004358 <_free_r>
 8003e0e:	e7c8      	b.n	8003da2 <__ssputs_r+0x46>

08003e10 <_svfiprintf_r>:
 8003e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e14:	461d      	mov	r5, r3
 8003e16:	898b      	ldrh	r3, [r1, #12]
 8003e18:	061f      	lsls	r7, r3, #24
 8003e1a:	b09d      	sub	sp, #116	; 0x74
 8003e1c:	4680      	mov	r8, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	4616      	mov	r6, r2
 8003e22:	d50f      	bpl.n	8003e44 <_svfiprintf_r+0x34>
 8003e24:	690b      	ldr	r3, [r1, #16]
 8003e26:	b96b      	cbnz	r3, 8003e44 <_svfiprintf_r+0x34>
 8003e28:	2140      	movs	r1, #64	; 0x40
 8003e2a:	f000 fae3 	bl	80043f4 <_malloc_r>
 8003e2e:	6020      	str	r0, [r4, #0]
 8003e30:	6120      	str	r0, [r4, #16]
 8003e32:	b928      	cbnz	r0, 8003e40 <_svfiprintf_r+0x30>
 8003e34:	230c      	movs	r3, #12
 8003e36:	f8c8 3000 	str.w	r3, [r8]
 8003e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3e:	e0c8      	b.n	8003fd2 <_svfiprintf_r+0x1c2>
 8003e40:	2340      	movs	r3, #64	; 0x40
 8003e42:	6163      	str	r3, [r4, #20]
 8003e44:	2300      	movs	r3, #0
 8003e46:	9309      	str	r3, [sp, #36]	; 0x24
 8003e48:	2320      	movs	r3, #32
 8003e4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e4e:	2330      	movs	r3, #48	; 0x30
 8003e50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e54:	9503      	str	r5, [sp, #12]
 8003e56:	f04f 0b01 	mov.w	fp, #1
 8003e5a:	4637      	mov	r7, r6
 8003e5c:	463d      	mov	r5, r7
 8003e5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e62:	b10b      	cbz	r3, 8003e68 <_svfiprintf_r+0x58>
 8003e64:	2b25      	cmp	r3, #37	; 0x25
 8003e66:	d13e      	bne.n	8003ee6 <_svfiprintf_r+0xd6>
 8003e68:	ebb7 0a06 	subs.w	sl, r7, r6
 8003e6c:	d00b      	beq.n	8003e86 <_svfiprintf_r+0x76>
 8003e6e:	4653      	mov	r3, sl
 8003e70:	4632      	mov	r2, r6
 8003e72:	4621      	mov	r1, r4
 8003e74:	4640      	mov	r0, r8
 8003e76:	f7ff ff71 	bl	8003d5c <__ssputs_r>
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	f000 80a4 	beq.w	8003fc8 <_svfiprintf_r+0x1b8>
 8003e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e82:	4453      	add	r3, sl
 8003e84:	9309      	str	r3, [sp, #36]	; 0x24
 8003e86:	783b      	ldrb	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 809d 	beq.w	8003fc8 <_svfiprintf_r+0x1b8>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f04f 32ff 	mov.w	r2, #4294967295
 8003e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e98:	9304      	str	r3, [sp, #16]
 8003e9a:	9307      	str	r3, [sp, #28]
 8003e9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ea0:	931a      	str	r3, [sp, #104]	; 0x68
 8003ea2:	462f      	mov	r7, r5
 8003ea4:	2205      	movs	r2, #5
 8003ea6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003eaa:	4850      	ldr	r0, [pc, #320]	; (8003fec <_svfiprintf_r+0x1dc>)
 8003eac:	f7fc f998 	bl	80001e0 <memchr>
 8003eb0:	9b04      	ldr	r3, [sp, #16]
 8003eb2:	b9d0      	cbnz	r0, 8003eea <_svfiprintf_r+0xda>
 8003eb4:	06d9      	lsls	r1, r3, #27
 8003eb6:	bf44      	itt	mi
 8003eb8:	2220      	movmi	r2, #32
 8003eba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ebe:	071a      	lsls	r2, r3, #28
 8003ec0:	bf44      	itt	mi
 8003ec2:	222b      	movmi	r2, #43	; 0x2b
 8003ec4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ec8:	782a      	ldrb	r2, [r5, #0]
 8003eca:	2a2a      	cmp	r2, #42	; 0x2a
 8003ecc:	d015      	beq.n	8003efa <_svfiprintf_r+0xea>
 8003ece:	9a07      	ldr	r2, [sp, #28]
 8003ed0:	462f      	mov	r7, r5
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	250a      	movs	r5, #10
 8003ed6:	4639      	mov	r1, r7
 8003ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003edc:	3b30      	subs	r3, #48	; 0x30
 8003ede:	2b09      	cmp	r3, #9
 8003ee0:	d94d      	bls.n	8003f7e <_svfiprintf_r+0x16e>
 8003ee2:	b1b8      	cbz	r0, 8003f14 <_svfiprintf_r+0x104>
 8003ee4:	e00f      	b.n	8003f06 <_svfiprintf_r+0xf6>
 8003ee6:	462f      	mov	r7, r5
 8003ee8:	e7b8      	b.n	8003e5c <_svfiprintf_r+0x4c>
 8003eea:	4a40      	ldr	r2, [pc, #256]	; (8003fec <_svfiprintf_r+0x1dc>)
 8003eec:	1a80      	subs	r0, r0, r2
 8003eee:	fa0b f000 	lsl.w	r0, fp, r0
 8003ef2:	4318      	orrs	r0, r3
 8003ef4:	9004      	str	r0, [sp, #16]
 8003ef6:	463d      	mov	r5, r7
 8003ef8:	e7d3      	b.n	8003ea2 <_svfiprintf_r+0x92>
 8003efa:	9a03      	ldr	r2, [sp, #12]
 8003efc:	1d11      	adds	r1, r2, #4
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	9103      	str	r1, [sp, #12]
 8003f02:	2a00      	cmp	r2, #0
 8003f04:	db01      	blt.n	8003f0a <_svfiprintf_r+0xfa>
 8003f06:	9207      	str	r2, [sp, #28]
 8003f08:	e004      	b.n	8003f14 <_svfiprintf_r+0x104>
 8003f0a:	4252      	negs	r2, r2
 8003f0c:	f043 0302 	orr.w	r3, r3, #2
 8003f10:	9207      	str	r2, [sp, #28]
 8003f12:	9304      	str	r3, [sp, #16]
 8003f14:	783b      	ldrb	r3, [r7, #0]
 8003f16:	2b2e      	cmp	r3, #46	; 0x2e
 8003f18:	d10c      	bne.n	8003f34 <_svfiprintf_r+0x124>
 8003f1a:	787b      	ldrb	r3, [r7, #1]
 8003f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f1e:	d133      	bne.n	8003f88 <_svfiprintf_r+0x178>
 8003f20:	9b03      	ldr	r3, [sp, #12]
 8003f22:	1d1a      	adds	r2, r3, #4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	9203      	str	r2, [sp, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bfb8      	it	lt
 8003f2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f30:	3702      	adds	r7, #2
 8003f32:	9305      	str	r3, [sp, #20]
 8003f34:	4d2e      	ldr	r5, [pc, #184]	; (8003ff0 <_svfiprintf_r+0x1e0>)
 8003f36:	7839      	ldrb	r1, [r7, #0]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f7fc f950 	bl	80001e0 <memchr>
 8003f40:	b138      	cbz	r0, 8003f52 <_svfiprintf_r+0x142>
 8003f42:	2340      	movs	r3, #64	; 0x40
 8003f44:	1b40      	subs	r0, r0, r5
 8003f46:	fa03 f000 	lsl.w	r0, r3, r0
 8003f4a:	9b04      	ldr	r3, [sp, #16]
 8003f4c:	4303      	orrs	r3, r0
 8003f4e:	3701      	adds	r7, #1
 8003f50:	9304      	str	r3, [sp, #16]
 8003f52:	7839      	ldrb	r1, [r7, #0]
 8003f54:	4827      	ldr	r0, [pc, #156]	; (8003ff4 <_svfiprintf_r+0x1e4>)
 8003f56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f5a:	2206      	movs	r2, #6
 8003f5c:	1c7e      	adds	r6, r7, #1
 8003f5e:	f7fc f93f 	bl	80001e0 <memchr>
 8003f62:	2800      	cmp	r0, #0
 8003f64:	d038      	beq.n	8003fd8 <_svfiprintf_r+0x1c8>
 8003f66:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <_svfiprintf_r+0x1e8>)
 8003f68:	bb13      	cbnz	r3, 8003fb0 <_svfiprintf_r+0x1a0>
 8003f6a:	9b03      	ldr	r3, [sp, #12]
 8003f6c:	3307      	adds	r3, #7
 8003f6e:	f023 0307 	bic.w	r3, r3, #7
 8003f72:	3308      	adds	r3, #8
 8003f74:	9303      	str	r3, [sp, #12]
 8003f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f78:	444b      	add	r3, r9
 8003f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f7c:	e76d      	b.n	8003e5a <_svfiprintf_r+0x4a>
 8003f7e:	fb05 3202 	mla	r2, r5, r2, r3
 8003f82:	2001      	movs	r0, #1
 8003f84:	460f      	mov	r7, r1
 8003f86:	e7a6      	b.n	8003ed6 <_svfiprintf_r+0xc6>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	3701      	adds	r7, #1
 8003f8c:	9305      	str	r3, [sp, #20]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	250a      	movs	r5, #10
 8003f92:	4638      	mov	r0, r7
 8003f94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f98:	3a30      	subs	r2, #48	; 0x30
 8003f9a:	2a09      	cmp	r2, #9
 8003f9c:	d903      	bls.n	8003fa6 <_svfiprintf_r+0x196>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0c8      	beq.n	8003f34 <_svfiprintf_r+0x124>
 8003fa2:	9105      	str	r1, [sp, #20]
 8003fa4:	e7c6      	b.n	8003f34 <_svfiprintf_r+0x124>
 8003fa6:	fb05 2101 	mla	r1, r5, r1, r2
 8003faa:	2301      	movs	r3, #1
 8003fac:	4607      	mov	r7, r0
 8003fae:	e7f0      	b.n	8003f92 <_svfiprintf_r+0x182>
 8003fb0:	ab03      	add	r3, sp, #12
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <_svfiprintf_r+0x1ec>)
 8003fb8:	a904      	add	r1, sp, #16
 8003fba:	4640      	mov	r0, r8
 8003fbc:	f3af 8000 	nop.w
 8003fc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003fc4:	4681      	mov	r9, r0
 8003fc6:	d1d6      	bne.n	8003f76 <_svfiprintf_r+0x166>
 8003fc8:	89a3      	ldrh	r3, [r4, #12]
 8003fca:	065b      	lsls	r3, r3, #25
 8003fcc:	f53f af35 	bmi.w	8003e3a <_svfiprintf_r+0x2a>
 8003fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fd2:	b01d      	add	sp, #116	; 0x74
 8003fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd8:	ab03      	add	r3, sp, #12
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	4622      	mov	r2, r4
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <_svfiprintf_r+0x1ec>)
 8003fe0:	a904      	add	r1, sp, #16
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	f000 f882 	bl	80040ec <_printf_i>
 8003fe8:	e7ea      	b.n	8003fc0 <_svfiprintf_r+0x1b0>
 8003fea:	bf00      	nop
 8003fec:	080045d2 	.word	0x080045d2
 8003ff0:	080045d8 	.word	0x080045d8
 8003ff4:	080045dc 	.word	0x080045dc
 8003ff8:	00000000 	.word	0x00000000
 8003ffc:	08003d5d 	.word	0x08003d5d

08004000 <_printf_common>:
 8004000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004004:	4691      	mov	r9, r2
 8004006:	461f      	mov	r7, r3
 8004008:	688a      	ldr	r2, [r1, #8]
 800400a:	690b      	ldr	r3, [r1, #16]
 800400c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004010:	4293      	cmp	r3, r2
 8004012:	bfb8      	it	lt
 8004014:	4613      	movlt	r3, r2
 8004016:	f8c9 3000 	str.w	r3, [r9]
 800401a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800401e:	4606      	mov	r6, r0
 8004020:	460c      	mov	r4, r1
 8004022:	b112      	cbz	r2, 800402a <_printf_common+0x2a>
 8004024:	3301      	adds	r3, #1
 8004026:	f8c9 3000 	str.w	r3, [r9]
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	0699      	lsls	r1, r3, #26
 800402e:	bf42      	ittt	mi
 8004030:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004034:	3302      	addmi	r3, #2
 8004036:	f8c9 3000 	strmi.w	r3, [r9]
 800403a:	6825      	ldr	r5, [r4, #0]
 800403c:	f015 0506 	ands.w	r5, r5, #6
 8004040:	d107      	bne.n	8004052 <_printf_common+0x52>
 8004042:	f104 0a19 	add.w	sl, r4, #25
 8004046:	68e3      	ldr	r3, [r4, #12]
 8004048:	f8d9 2000 	ldr.w	r2, [r9]
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	42ab      	cmp	r3, r5
 8004050:	dc28      	bgt.n	80040a4 <_printf_common+0xa4>
 8004052:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	3300      	adds	r3, #0
 800405a:	bf18      	it	ne
 800405c:	2301      	movne	r3, #1
 800405e:	0692      	lsls	r2, r2, #26
 8004060:	d42d      	bmi.n	80040be <_printf_common+0xbe>
 8004062:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004066:	4639      	mov	r1, r7
 8004068:	4630      	mov	r0, r6
 800406a:	47c0      	blx	r8
 800406c:	3001      	adds	r0, #1
 800406e:	d020      	beq.n	80040b2 <_printf_common+0xb2>
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	68e5      	ldr	r5, [r4, #12]
 8004074:	f8d9 2000 	ldr.w	r2, [r9]
 8004078:	f003 0306 	and.w	r3, r3, #6
 800407c:	2b04      	cmp	r3, #4
 800407e:	bf08      	it	eq
 8004080:	1aad      	subeq	r5, r5, r2
 8004082:	68a3      	ldr	r3, [r4, #8]
 8004084:	6922      	ldr	r2, [r4, #16]
 8004086:	bf0c      	ite	eq
 8004088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800408c:	2500      	movne	r5, #0
 800408e:	4293      	cmp	r3, r2
 8004090:	bfc4      	itt	gt
 8004092:	1a9b      	subgt	r3, r3, r2
 8004094:	18ed      	addgt	r5, r5, r3
 8004096:	f04f 0900 	mov.w	r9, #0
 800409a:	341a      	adds	r4, #26
 800409c:	454d      	cmp	r5, r9
 800409e:	d11a      	bne.n	80040d6 <_printf_common+0xd6>
 80040a0:	2000      	movs	r0, #0
 80040a2:	e008      	b.n	80040b6 <_printf_common+0xb6>
 80040a4:	2301      	movs	r3, #1
 80040a6:	4652      	mov	r2, sl
 80040a8:	4639      	mov	r1, r7
 80040aa:	4630      	mov	r0, r6
 80040ac:	47c0      	blx	r8
 80040ae:	3001      	adds	r0, #1
 80040b0:	d103      	bne.n	80040ba <_printf_common+0xba>
 80040b2:	f04f 30ff 	mov.w	r0, #4294967295
 80040b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ba:	3501      	adds	r5, #1
 80040bc:	e7c3      	b.n	8004046 <_printf_common+0x46>
 80040be:	18e1      	adds	r1, r4, r3
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	2030      	movs	r0, #48	; 0x30
 80040c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040c8:	4422      	add	r2, r4
 80040ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040d2:	3302      	adds	r3, #2
 80040d4:	e7c5      	b.n	8004062 <_printf_common+0x62>
 80040d6:	2301      	movs	r3, #1
 80040d8:	4622      	mov	r2, r4
 80040da:	4639      	mov	r1, r7
 80040dc:	4630      	mov	r0, r6
 80040de:	47c0      	blx	r8
 80040e0:	3001      	adds	r0, #1
 80040e2:	d0e6      	beq.n	80040b2 <_printf_common+0xb2>
 80040e4:	f109 0901 	add.w	r9, r9, #1
 80040e8:	e7d8      	b.n	800409c <_printf_common+0x9c>
	...

080040ec <_printf_i>:
 80040ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80040f4:	460c      	mov	r4, r1
 80040f6:	7e09      	ldrb	r1, [r1, #24]
 80040f8:	b085      	sub	sp, #20
 80040fa:	296e      	cmp	r1, #110	; 0x6e
 80040fc:	4617      	mov	r7, r2
 80040fe:	4606      	mov	r6, r0
 8004100:	4698      	mov	r8, r3
 8004102:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004104:	f000 80b3 	beq.w	800426e <_printf_i+0x182>
 8004108:	d822      	bhi.n	8004150 <_printf_i+0x64>
 800410a:	2963      	cmp	r1, #99	; 0x63
 800410c:	d036      	beq.n	800417c <_printf_i+0x90>
 800410e:	d80a      	bhi.n	8004126 <_printf_i+0x3a>
 8004110:	2900      	cmp	r1, #0
 8004112:	f000 80b9 	beq.w	8004288 <_printf_i+0x19c>
 8004116:	2958      	cmp	r1, #88	; 0x58
 8004118:	f000 8083 	beq.w	8004222 <_printf_i+0x136>
 800411c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004120:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004124:	e032      	b.n	800418c <_printf_i+0xa0>
 8004126:	2964      	cmp	r1, #100	; 0x64
 8004128:	d001      	beq.n	800412e <_printf_i+0x42>
 800412a:	2969      	cmp	r1, #105	; 0x69
 800412c:	d1f6      	bne.n	800411c <_printf_i+0x30>
 800412e:	6820      	ldr	r0, [r4, #0]
 8004130:	6813      	ldr	r3, [r2, #0]
 8004132:	0605      	lsls	r5, r0, #24
 8004134:	f103 0104 	add.w	r1, r3, #4
 8004138:	d52a      	bpl.n	8004190 <_printf_i+0xa4>
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6011      	str	r1, [r2, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	da03      	bge.n	800414a <_printf_i+0x5e>
 8004142:	222d      	movs	r2, #45	; 0x2d
 8004144:	425b      	negs	r3, r3
 8004146:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800414a:	486f      	ldr	r0, [pc, #444]	; (8004308 <_printf_i+0x21c>)
 800414c:	220a      	movs	r2, #10
 800414e:	e039      	b.n	80041c4 <_printf_i+0xd8>
 8004150:	2973      	cmp	r1, #115	; 0x73
 8004152:	f000 809d 	beq.w	8004290 <_printf_i+0x1a4>
 8004156:	d808      	bhi.n	800416a <_printf_i+0x7e>
 8004158:	296f      	cmp	r1, #111	; 0x6f
 800415a:	d020      	beq.n	800419e <_printf_i+0xb2>
 800415c:	2970      	cmp	r1, #112	; 0x70
 800415e:	d1dd      	bne.n	800411c <_printf_i+0x30>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	f043 0320 	orr.w	r3, r3, #32
 8004166:	6023      	str	r3, [r4, #0]
 8004168:	e003      	b.n	8004172 <_printf_i+0x86>
 800416a:	2975      	cmp	r1, #117	; 0x75
 800416c:	d017      	beq.n	800419e <_printf_i+0xb2>
 800416e:	2978      	cmp	r1, #120	; 0x78
 8004170:	d1d4      	bne.n	800411c <_printf_i+0x30>
 8004172:	2378      	movs	r3, #120	; 0x78
 8004174:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004178:	4864      	ldr	r0, [pc, #400]	; (800430c <_printf_i+0x220>)
 800417a:	e055      	b.n	8004228 <_printf_i+0x13c>
 800417c:	6813      	ldr	r3, [r2, #0]
 800417e:	1d19      	adds	r1, r3, #4
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6011      	str	r1, [r2, #0]
 8004184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800418c:	2301      	movs	r3, #1
 800418e:	e08c      	b.n	80042aa <_printf_i+0x1be>
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6011      	str	r1, [r2, #0]
 8004194:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004198:	bf18      	it	ne
 800419a:	b21b      	sxthne	r3, r3
 800419c:	e7cf      	b.n	800413e <_printf_i+0x52>
 800419e:	6813      	ldr	r3, [r2, #0]
 80041a0:	6825      	ldr	r5, [r4, #0]
 80041a2:	1d18      	adds	r0, r3, #4
 80041a4:	6010      	str	r0, [r2, #0]
 80041a6:	0628      	lsls	r0, r5, #24
 80041a8:	d501      	bpl.n	80041ae <_printf_i+0xc2>
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	e002      	b.n	80041b4 <_printf_i+0xc8>
 80041ae:	0668      	lsls	r0, r5, #25
 80041b0:	d5fb      	bpl.n	80041aa <_printf_i+0xbe>
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	4854      	ldr	r0, [pc, #336]	; (8004308 <_printf_i+0x21c>)
 80041b6:	296f      	cmp	r1, #111	; 0x6f
 80041b8:	bf14      	ite	ne
 80041ba:	220a      	movne	r2, #10
 80041bc:	2208      	moveq	r2, #8
 80041be:	2100      	movs	r1, #0
 80041c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041c4:	6865      	ldr	r5, [r4, #4]
 80041c6:	60a5      	str	r5, [r4, #8]
 80041c8:	2d00      	cmp	r5, #0
 80041ca:	f2c0 8095 	blt.w	80042f8 <_printf_i+0x20c>
 80041ce:	6821      	ldr	r1, [r4, #0]
 80041d0:	f021 0104 	bic.w	r1, r1, #4
 80041d4:	6021      	str	r1, [r4, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d13d      	bne.n	8004256 <_printf_i+0x16a>
 80041da:	2d00      	cmp	r5, #0
 80041dc:	f040 808e 	bne.w	80042fc <_printf_i+0x210>
 80041e0:	4665      	mov	r5, ip
 80041e2:	2a08      	cmp	r2, #8
 80041e4:	d10b      	bne.n	80041fe <_printf_i+0x112>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	07db      	lsls	r3, r3, #31
 80041ea:	d508      	bpl.n	80041fe <_printf_i+0x112>
 80041ec:	6923      	ldr	r3, [r4, #16]
 80041ee:	6862      	ldr	r2, [r4, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	bfde      	ittt	le
 80041f4:	2330      	movle	r3, #48	; 0x30
 80041f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041fe:	ebac 0305 	sub.w	r3, ip, r5
 8004202:	6123      	str	r3, [r4, #16]
 8004204:	f8cd 8000 	str.w	r8, [sp]
 8004208:	463b      	mov	r3, r7
 800420a:	aa03      	add	r2, sp, #12
 800420c:	4621      	mov	r1, r4
 800420e:	4630      	mov	r0, r6
 8004210:	f7ff fef6 	bl	8004000 <_printf_common>
 8004214:	3001      	adds	r0, #1
 8004216:	d14d      	bne.n	80042b4 <_printf_i+0x1c8>
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	b005      	add	sp, #20
 800421e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004222:	4839      	ldr	r0, [pc, #228]	; (8004308 <_printf_i+0x21c>)
 8004224:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004228:	6813      	ldr	r3, [r2, #0]
 800422a:	6821      	ldr	r1, [r4, #0]
 800422c:	1d1d      	adds	r5, r3, #4
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6015      	str	r5, [r2, #0]
 8004232:	060a      	lsls	r2, r1, #24
 8004234:	d50b      	bpl.n	800424e <_printf_i+0x162>
 8004236:	07ca      	lsls	r2, r1, #31
 8004238:	bf44      	itt	mi
 800423a:	f041 0120 	orrmi.w	r1, r1, #32
 800423e:	6021      	strmi	r1, [r4, #0]
 8004240:	b91b      	cbnz	r3, 800424a <_printf_i+0x15e>
 8004242:	6822      	ldr	r2, [r4, #0]
 8004244:	f022 0220 	bic.w	r2, r2, #32
 8004248:	6022      	str	r2, [r4, #0]
 800424a:	2210      	movs	r2, #16
 800424c:	e7b7      	b.n	80041be <_printf_i+0xd2>
 800424e:	064d      	lsls	r5, r1, #25
 8004250:	bf48      	it	mi
 8004252:	b29b      	uxthmi	r3, r3
 8004254:	e7ef      	b.n	8004236 <_printf_i+0x14a>
 8004256:	4665      	mov	r5, ip
 8004258:	fbb3 f1f2 	udiv	r1, r3, r2
 800425c:	fb02 3311 	mls	r3, r2, r1, r3
 8004260:	5cc3      	ldrb	r3, [r0, r3]
 8004262:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004266:	460b      	mov	r3, r1
 8004268:	2900      	cmp	r1, #0
 800426a:	d1f5      	bne.n	8004258 <_printf_i+0x16c>
 800426c:	e7b9      	b.n	80041e2 <_printf_i+0xf6>
 800426e:	6813      	ldr	r3, [r2, #0]
 8004270:	6825      	ldr	r5, [r4, #0]
 8004272:	6961      	ldr	r1, [r4, #20]
 8004274:	1d18      	adds	r0, r3, #4
 8004276:	6010      	str	r0, [r2, #0]
 8004278:	0628      	lsls	r0, r5, #24
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	d501      	bpl.n	8004282 <_printf_i+0x196>
 800427e:	6019      	str	r1, [r3, #0]
 8004280:	e002      	b.n	8004288 <_printf_i+0x19c>
 8004282:	066a      	lsls	r2, r5, #25
 8004284:	d5fb      	bpl.n	800427e <_printf_i+0x192>
 8004286:	8019      	strh	r1, [r3, #0]
 8004288:	2300      	movs	r3, #0
 800428a:	6123      	str	r3, [r4, #16]
 800428c:	4665      	mov	r5, ip
 800428e:	e7b9      	b.n	8004204 <_printf_i+0x118>
 8004290:	6813      	ldr	r3, [r2, #0]
 8004292:	1d19      	adds	r1, r3, #4
 8004294:	6011      	str	r1, [r2, #0]
 8004296:	681d      	ldr	r5, [r3, #0]
 8004298:	6862      	ldr	r2, [r4, #4]
 800429a:	2100      	movs	r1, #0
 800429c:	4628      	mov	r0, r5
 800429e:	f7fb ff9f 	bl	80001e0 <memchr>
 80042a2:	b108      	cbz	r0, 80042a8 <_printf_i+0x1bc>
 80042a4:	1b40      	subs	r0, r0, r5
 80042a6:	6060      	str	r0, [r4, #4]
 80042a8:	6863      	ldr	r3, [r4, #4]
 80042aa:	6123      	str	r3, [r4, #16]
 80042ac:	2300      	movs	r3, #0
 80042ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b2:	e7a7      	b.n	8004204 <_printf_i+0x118>
 80042b4:	6923      	ldr	r3, [r4, #16]
 80042b6:	462a      	mov	r2, r5
 80042b8:	4639      	mov	r1, r7
 80042ba:	4630      	mov	r0, r6
 80042bc:	47c0      	blx	r8
 80042be:	3001      	adds	r0, #1
 80042c0:	d0aa      	beq.n	8004218 <_printf_i+0x12c>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	079b      	lsls	r3, r3, #30
 80042c6:	d413      	bmi.n	80042f0 <_printf_i+0x204>
 80042c8:	68e0      	ldr	r0, [r4, #12]
 80042ca:	9b03      	ldr	r3, [sp, #12]
 80042cc:	4298      	cmp	r0, r3
 80042ce:	bfb8      	it	lt
 80042d0:	4618      	movlt	r0, r3
 80042d2:	e7a3      	b.n	800421c <_printf_i+0x130>
 80042d4:	2301      	movs	r3, #1
 80042d6:	464a      	mov	r2, r9
 80042d8:	4639      	mov	r1, r7
 80042da:	4630      	mov	r0, r6
 80042dc:	47c0      	blx	r8
 80042de:	3001      	adds	r0, #1
 80042e0:	d09a      	beq.n	8004218 <_printf_i+0x12c>
 80042e2:	3501      	adds	r5, #1
 80042e4:	68e3      	ldr	r3, [r4, #12]
 80042e6:	9a03      	ldr	r2, [sp, #12]
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	42ab      	cmp	r3, r5
 80042ec:	dcf2      	bgt.n	80042d4 <_printf_i+0x1e8>
 80042ee:	e7eb      	b.n	80042c8 <_printf_i+0x1dc>
 80042f0:	2500      	movs	r5, #0
 80042f2:	f104 0919 	add.w	r9, r4, #25
 80042f6:	e7f5      	b.n	80042e4 <_printf_i+0x1f8>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ac      	bne.n	8004256 <_printf_i+0x16a>
 80042fc:	7803      	ldrb	r3, [r0, #0]
 80042fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004302:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004306:	e76c      	b.n	80041e2 <_printf_i+0xf6>
 8004308:	080045e3 	.word	0x080045e3
 800430c:	080045f4 	.word	0x080045f4

08004310 <memcpy>:
 8004310:	b510      	push	{r4, lr}
 8004312:	1e43      	subs	r3, r0, #1
 8004314:	440a      	add	r2, r1
 8004316:	4291      	cmp	r1, r2
 8004318:	d100      	bne.n	800431c <memcpy+0xc>
 800431a:	bd10      	pop	{r4, pc}
 800431c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004320:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004324:	e7f7      	b.n	8004316 <memcpy+0x6>

08004326 <memmove>:
 8004326:	4288      	cmp	r0, r1
 8004328:	b510      	push	{r4, lr}
 800432a:	eb01 0302 	add.w	r3, r1, r2
 800432e:	d807      	bhi.n	8004340 <memmove+0x1a>
 8004330:	1e42      	subs	r2, r0, #1
 8004332:	4299      	cmp	r1, r3
 8004334:	d00a      	beq.n	800434c <memmove+0x26>
 8004336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800433a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800433e:	e7f8      	b.n	8004332 <memmove+0xc>
 8004340:	4283      	cmp	r3, r0
 8004342:	d9f5      	bls.n	8004330 <memmove+0xa>
 8004344:	1881      	adds	r1, r0, r2
 8004346:	1ad2      	subs	r2, r2, r3
 8004348:	42d3      	cmn	r3, r2
 800434a:	d100      	bne.n	800434e <memmove+0x28>
 800434c:	bd10      	pop	{r4, pc}
 800434e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004352:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004356:	e7f7      	b.n	8004348 <memmove+0x22>

08004358 <_free_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	4605      	mov	r5, r0
 800435c:	2900      	cmp	r1, #0
 800435e:	d045      	beq.n	80043ec <_free_r+0x94>
 8004360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004364:	1f0c      	subs	r4, r1, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	bfb8      	it	lt
 800436a:	18e4      	addlt	r4, r4, r3
 800436c:	f000 f8d2 	bl	8004514 <__malloc_lock>
 8004370:	4a1f      	ldr	r2, [pc, #124]	; (80043f0 <_free_r+0x98>)
 8004372:	6813      	ldr	r3, [r2, #0]
 8004374:	4610      	mov	r0, r2
 8004376:	b933      	cbnz	r3, 8004386 <_free_r+0x2e>
 8004378:	6063      	str	r3, [r4, #4]
 800437a:	6014      	str	r4, [r2, #0]
 800437c:	4628      	mov	r0, r5
 800437e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004382:	f000 b8c8 	b.w	8004516 <__malloc_unlock>
 8004386:	42a3      	cmp	r3, r4
 8004388:	d90c      	bls.n	80043a4 <_free_r+0x4c>
 800438a:	6821      	ldr	r1, [r4, #0]
 800438c:	1862      	adds	r2, r4, r1
 800438e:	4293      	cmp	r3, r2
 8004390:	bf04      	itt	eq
 8004392:	681a      	ldreq	r2, [r3, #0]
 8004394:	685b      	ldreq	r3, [r3, #4]
 8004396:	6063      	str	r3, [r4, #4]
 8004398:	bf04      	itt	eq
 800439a:	1852      	addeq	r2, r2, r1
 800439c:	6022      	streq	r2, [r4, #0]
 800439e:	6004      	str	r4, [r0, #0]
 80043a0:	e7ec      	b.n	800437c <_free_r+0x24>
 80043a2:	4613      	mov	r3, r2
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	b10a      	cbz	r2, 80043ac <_free_r+0x54>
 80043a8:	42a2      	cmp	r2, r4
 80043aa:	d9fa      	bls.n	80043a2 <_free_r+0x4a>
 80043ac:	6819      	ldr	r1, [r3, #0]
 80043ae:	1858      	adds	r0, r3, r1
 80043b0:	42a0      	cmp	r0, r4
 80043b2:	d10b      	bne.n	80043cc <_free_r+0x74>
 80043b4:	6820      	ldr	r0, [r4, #0]
 80043b6:	4401      	add	r1, r0
 80043b8:	1858      	adds	r0, r3, r1
 80043ba:	4282      	cmp	r2, r0
 80043bc:	6019      	str	r1, [r3, #0]
 80043be:	d1dd      	bne.n	800437c <_free_r+0x24>
 80043c0:	6810      	ldr	r0, [r2, #0]
 80043c2:	6852      	ldr	r2, [r2, #4]
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	4401      	add	r1, r0
 80043c8:	6019      	str	r1, [r3, #0]
 80043ca:	e7d7      	b.n	800437c <_free_r+0x24>
 80043cc:	d902      	bls.n	80043d4 <_free_r+0x7c>
 80043ce:	230c      	movs	r3, #12
 80043d0:	602b      	str	r3, [r5, #0]
 80043d2:	e7d3      	b.n	800437c <_free_r+0x24>
 80043d4:	6820      	ldr	r0, [r4, #0]
 80043d6:	1821      	adds	r1, r4, r0
 80043d8:	428a      	cmp	r2, r1
 80043da:	bf04      	itt	eq
 80043dc:	6811      	ldreq	r1, [r2, #0]
 80043de:	6852      	ldreq	r2, [r2, #4]
 80043e0:	6062      	str	r2, [r4, #4]
 80043e2:	bf04      	itt	eq
 80043e4:	1809      	addeq	r1, r1, r0
 80043e6:	6021      	streq	r1, [r4, #0]
 80043e8:	605c      	str	r4, [r3, #4]
 80043ea:	e7c7      	b.n	800437c <_free_r+0x24>
 80043ec:	bd38      	pop	{r3, r4, r5, pc}
 80043ee:	bf00      	nop
 80043f0:	20000b14 	.word	0x20000b14

080043f4 <_malloc_r>:
 80043f4:	b570      	push	{r4, r5, r6, lr}
 80043f6:	1ccd      	adds	r5, r1, #3
 80043f8:	f025 0503 	bic.w	r5, r5, #3
 80043fc:	3508      	adds	r5, #8
 80043fe:	2d0c      	cmp	r5, #12
 8004400:	bf38      	it	cc
 8004402:	250c      	movcc	r5, #12
 8004404:	2d00      	cmp	r5, #0
 8004406:	4606      	mov	r6, r0
 8004408:	db01      	blt.n	800440e <_malloc_r+0x1a>
 800440a:	42a9      	cmp	r1, r5
 800440c:	d903      	bls.n	8004416 <_malloc_r+0x22>
 800440e:	230c      	movs	r3, #12
 8004410:	6033      	str	r3, [r6, #0]
 8004412:	2000      	movs	r0, #0
 8004414:	bd70      	pop	{r4, r5, r6, pc}
 8004416:	f000 f87d 	bl	8004514 <__malloc_lock>
 800441a:	4a21      	ldr	r2, [pc, #132]	; (80044a0 <_malloc_r+0xac>)
 800441c:	6814      	ldr	r4, [r2, #0]
 800441e:	4621      	mov	r1, r4
 8004420:	b991      	cbnz	r1, 8004448 <_malloc_r+0x54>
 8004422:	4c20      	ldr	r4, [pc, #128]	; (80044a4 <_malloc_r+0xb0>)
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	b91b      	cbnz	r3, 8004430 <_malloc_r+0x3c>
 8004428:	4630      	mov	r0, r6
 800442a:	f000 f863 	bl	80044f4 <_sbrk_r>
 800442e:	6020      	str	r0, [r4, #0]
 8004430:	4629      	mov	r1, r5
 8004432:	4630      	mov	r0, r6
 8004434:	f000 f85e 	bl	80044f4 <_sbrk_r>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d124      	bne.n	8004486 <_malloc_r+0x92>
 800443c:	230c      	movs	r3, #12
 800443e:	6033      	str	r3, [r6, #0]
 8004440:	4630      	mov	r0, r6
 8004442:	f000 f868 	bl	8004516 <__malloc_unlock>
 8004446:	e7e4      	b.n	8004412 <_malloc_r+0x1e>
 8004448:	680b      	ldr	r3, [r1, #0]
 800444a:	1b5b      	subs	r3, r3, r5
 800444c:	d418      	bmi.n	8004480 <_malloc_r+0x8c>
 800444e:	2b0b      	cmp	r3, #11
 8004450:	d90f      	bls.n	8004472 <_malloc_r+0x7e>
 8004452:	600b      	str	r3, [r1, #0]
 8004454:	50cd      	str	r5, [r1, r3]
 8004456:	18cc      	adds	r4, r1, r3
 8004458:	4630      	mov	r0, r6
 800445a:	f000 f85c 	bl	8004516 <__malloc_unlock>
 800445e:	f104 000b 	add.w	r0, r4, #11
 8004462:	1d23      	adds	r3, r4, #4
 8004464:	f020 0007 	bic.w	r0, r0, #7
 8004468:	1ac3      	subs	r3, r0, r3
 800446a:	d0d3      	beq.n	8004414 <_malloc_r+0x20>
 800446c:	425a      	negs	r2, r3
 800446e:	50e2      	str	r2, [r4, r3]
 8004470:	e7d0      	b.n	8004414 <_malloc_r+0x20>
 8004472:	428c      	cmp	r4, r1
 8004474:	684b      	ldr	r3, [r1, #4]
 8004476:	bf16      	itet	ne
 8004478:	6063      	strne	r3, [r4, #4]
 800447a:	6013      	streq	r3, [r2, #0]
 800447c:	460c      	movne	r4, r1
 800447e:	e7eb      	b.n	8004458 <_malloc_r+0x64>
 8004480:	460c      	mov	r4, r1
 8004482:	6849      	ldr	r1, [r1, #4]
 8004484:	e7cc      	b.n	8004420 <_malloc_r+0x2c>
 8004486:	1cc4      	adds	r4, r0, #3
 8004488:	f024 0403 	bic.w	r4, r4, #3
 800448c:	42a0      	cmp	r0, r4
 800448e:	d005      	beq.n	800449c <_malloc_r+0xa8>
 8004490:	1a21      	subs	r1, r4, r0
 8004492:	4630      	mov	r0, r6
 8004494:	f000 f82e 	bl	80044f4 <_sbrk_r>
 8004498:	3001      	adds	r0, #1
 800449a:	d0cf      	beq.n	800443c <_malloc_r+0x48>
 800449c:	6025      	str	r5, [r4, #0]
 800449e:	e7db      	b.n	8004458 <_malloc_r+0x64>
 80044a0:	20000b14 	.word	0x20000b14
 80044a4:	20000b18 	.word	0x20000b18

080044a8 <_realloc_r>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	4607      	mov	r7, r0
 80044ac:	4614      	mov	r4, r2
 80044ae:	460e      	mov	r6, r1
 80044b0:	b921      	cbnz	r1, 80044bc <_realloc_r+0x14>
 80044b2:	4611      	mov	r1, r2
 80044b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044b8:	f7ff bf9c 	b.w	80043f4 <_malloc_r>
 80044bc:	b922      	cbnz	r2, 80044c8 <_realloc_r+0x20>
 80044be:	f7ff ff4b 	bl	8004358 <_free_r>
 80044c2:	4625      	mov	r5, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044c8:	f000 f826 	bl	8004518 <_malloc_usable_size_r>
 80044cc:	42a0      	cmp	r0, r4
 80044ce:	d20f      	bcs.n	80044f0 <_realloc_r+0x48>
 80044d0:	4621      	mov	r1, r4
 80044d2:	4638      	mov	r0, r7
 80044d4:	f7ff ff8e 	bl	80043f4 <_malloc_r>
 80044d8:	4605      	mov	r5, r0
 80044da:	2800      	cmp	r0, #0
 80044dc:	d0f2      	beq.n	80044c4 <_realloc_r+0x1c>
 80044de:	4631      	mov	r1, r6
 80044e0:	4622      	mov	r2, r4
 80044e2:	f7ff ff15 	bl	8004310 <memcpy>
 80044e6:	4631      	mov	r1, r6
 80044e8:	4638      	mov	r0, r7
 80044ea:	f7ff ff35 	bl	8004358 <_free_r>
 80044ee:	e7e9      	b.n	80044c4 <_realloc_r+0x1c>
 80044f0:	4635      	mov	r5, r6
 80044f2:	e7e7      	b.n	80044c4 <_realloc_r+0x1c>

080044f4 <_sbrk_r>:
 80044f4:	b538      	push	{r3, r4, r5, lr}
 80044f6:	4c06      	ldr	r4, [pc, #24]	; (8004510 <_sbrk_r+0x1c>)
 80044f8:	2300      	movs	r3, #0
 80044fa:	4605      	mov	r5, r0
 80044fc:	4608      	mov	r0, r1
 80044fe:	6023      	str	r3, [r4, #0]
 8004500:	f7fc fb5c 	bl	8000bbc <_sbrk>
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d102      	bne.n	800450e <_sbrk_r+0x1a>
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	b103      	cbz	r3, 800450e <_sbrk_r+0x1a>
 800450c:	602b      	str	r3, [r5, #0]
 800450e:	bd38      	pop	{r3, r4, r5, pc}
 8004510:	20000b20 	.word	0x20000b20

08004514 <__malloc_lock>:
 8004514:	4770      	bx	lr

08004516 <__malloc_unlock>:
 8004516:	4770      	bx	lr

08004518 <_malloc_usable_size_r>:
 8004518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800451c:	1f18      	subs	r0, r3, #4
 800451e:	2b00      	cmp	r3, #0
 8004520:	bfbc      	itt	lt
 8004522:	580b      	ldrlt	r3, [r1, r0]
 8004524:	18c0      	addlt	r0, r0, r3
 8004526:	4770      	bx	lr

08004528 <_init>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	bf00      	nop
 800452c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452e:	bc08      	pop	{r3}
 8004530:	469e      	mov	lr, r3
 8004532:	4770      	bx	lr

08004534 <_fini>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	bf00      	nop
 8004538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453a:	bc08      	pop	{r3}
 800453c:	469e      	mov	lr, r3
 800453e:	4770      	bx	lr
