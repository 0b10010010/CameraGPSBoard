
STM32L4Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f14  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f8  080030f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080030f8  080030f8  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003100  08003100  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08003114  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003114  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b212  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b7a  00000000  00000000  0002b24e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000988  00000000  00000000  0002cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000890  00000000  00000000  0002d750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003eb1  00000000  00000000  0002dfe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e19  00000000  00000000  00031e91  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f47d  00000000  00000000  0003acaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da127  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002518  00000000  00000000  000da1a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003088 	.word	0x08003088

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003088 	.word	0x08003088

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b972 	b.w	80004d8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	4688      	mov	r8, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14b      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021a:	428a      	cmp	r2, r1
 800021c:	4615      	mov	r5, r2
 800021e:	d967      	bls.n	80002f0 <__udivmoddi4+0xe4>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0720 	rsb	r7, r2, #32
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	fa20 f707 	lsr.w	r7, r0, r7
 8000232:	4095      	lsls	r5, r2
 8000234:	ea47 0803 	orr.w	r8, r7, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbb8 f7fe 	udiv	r7, r8, lr
 8000244:	fa1f fc85 	uxth.w	ip, r5
 8000248:	fb0e 8817 	mls	r8, lr, r7, r8
 800024c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000250:	fb07 f10c 	mul.w	r1, r7, ip
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18eb      	adds	r3, r5, r3
 800025a:	f107 30ff 	add.w	r0, r7, #4294967295
 800025e:	f080 811b 	bcs.w	8000498 <__udivmoddi4+0x28c>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8118 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000268:	3f02      	subs	r7, #2
 800026a:	442b      	add	r3, r5
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0fe 	udiv	r0, r3, lr
 8000274:	fb0e 3310 	mls	r3, lr, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000280:	45a4      	cmp	ip, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	192c      	adds	r4, r5, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x290>
 800028e:	45a4      	cmp	ip, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x290>
 8000294:	3802      	subs	r0, #2
 8000296:	442c      	add	r4, r5
 8000298:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800029c:	eba4 040c 	sub.w	r4, r4, ip
 80002a0:	2700      	movs	r7, #0
 80002a2:	b11e      	cbz	r6, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c6 4300 	strd	r4, r3, [r6]
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xbe>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80eb 	beq.w	8000492 <__udivmoddi4+0x286>
 80002bc:	2700      	movs	r7, #0
 80002be:	e9c6 0100 	strd	r0, r1, [r6]
 80002c2:	4638      	mov	r0, r7
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f783 	clz	r7, r3
 80002ce:	2f00      	cmp	r7, #0
 80002d0:	d147      	bne.n	8000362 <__udivmoddi4+0x156>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd0>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2c4>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa0>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa0>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xe8>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 808f 	bne.w	800041c <__udivmoddi4+0x210>
 80002fe:	1b49      	subs	r1, r1, r5
 8000300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000304:	fa1f f885 	uxth.w	r8, r5
 8000308:	2701      	movs	r7, #1
 800030a:	fbb1 fcfe 	udiv	ip, r1, lr
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	fb0e 111c 	mls	r1, lr, ip, r1
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb08 f10c 	mul.w	r1, r8, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x124>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4299      	cmp	r1, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 800032e:	4684      	mov	ip, r0
 8000330:	1a59      	subs	r1, r3, r1
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb1 f0fe 	udiv	r0, r1, lr
 8000338:	fb0e 1410 	mls	r4, lr, r0, r1
 800033c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000340:	fb08 f800 	mul.w	r8, r8, r0
 8000344:	45a0      	cmp	r8, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x14c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x14a>
 8000350:	45a0      	cmp	r8, r4
 8000352:	f200 80b6 	bhi.w	80004c2 <__udivmoddi4+0x2b6>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 0408 	sub.w	r4, r4, r8
 800035c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000360:	e79f      	b.n	80002a2 <__udivmoddi4+0x96>
 8000362:	f1c7 0c20 	rsb	ip, r7, #32
 8000366:	40bb      	lsls	r3, r7
 8000368:	fa22 fe0c 	lsr.w	lr, r2, ip
 800036c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000370:	fa01 f407 	lsl.w	r4, r1, r7
 8000374:	fa20 f50c 	lsr.w	r5, r0, ip
 8000378:	fa21 f30c 	lsr.w	r3, r1, ip
 800037c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000380:	4325      	orrs	r5, r4
 8000382:	fbb3 f9f8 	udiv	r9, r3, r8
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	fb08 3319 	mls	r3, r8, r9, r3
 800038c:	fa1f fa8e 	uxth.w	sl, lr
 8000390:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000394:	fb09 f40a 	mul.w	r4, r9, sl
 8000398:	429c      	cmp	r4, r3
 800039a:	fa02 f207 	lsl.w	r2, r2, r7
 800039e:	fa00 f107 	lsl.w	r1, r0, r7
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1e 0303 	adds.w	r3, lr, r3
 80003a8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ac:	f080 8087 	bcs.w	80004be <__udivmoddi4+0x2b2>
 80003b0:	429c      	cmp	r4, r3
 80003b2:	f240 8084 	bls.w	80004be <__udivmoddi4+0x2b2>
 80003b6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ba:	4473      	add	r3, lr
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	b2ad      	uxth	r5, r5
 80003c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c4:	fb08 3310 	mls	r3, r8, r0, r3
 80003c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003cc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d0:	45a2      	cmp	sl, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1e 0404 	adds.w	r4, lr, r4
 80003d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003dc:	d26b      	bcs.n	80004b6 <__udivmoddi4+0x2aa>
 80003de:	45a2      	cmp	sl, r4
 80003e0:	d969      	bls.n	80004b6 <__udivmoddi4+0x2aa>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4474      	add	r4, lr
 80003e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ea:	fba0 8902 	umull	r8, r9, r0, r2
 80003ee:	eba4 040a 	sub.w	r4, r4, sl
 80003f2:	454c      	cmp	r4, r9
 80003f4:	46c2      	mov	sl, r8
 80003f6:	464b      	mov	r3, r9
 80003f8:	d354      	bcc.n	80004a4 <__udivmoddi4+0x298>
 80003fa:	d051      	beq.n	80004a0 <__udivmoddi4+0x294>
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d069      	beq.n	80004d4 <__udivmoddi4+0x2c8>
 8000400:	ebb1 050a 	subs.w	r5, r1, sl
 8000404:	eb64 0403 	sbc.w	r4, r4, r3
 8000408:	fa04 fc0c 	lsl.w	ip, r4, ip
 800040c:	40fd      	lsrs	r5, r7
 800040e:	40fc      	lsrs	r4, r7
 8000410:	ea4c 0505 	orr.w	r5, ip, r5
 8000414:	e9c6 5400 	strd	r5, r4, [r6]
 8000418:	2700      	movs	r7, #0
 800041a:	e747      	b.n	80002ac <__udivmoddi4+0xa0>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f703 	lsr.w	r7, r0, r3
 8000424:	4095      	lsls	r5, r2
 8000426:	fa01 f002 	lsl.w	r0, r1, r2
 800042a:	fa21 f303 	lsr.w	r3, r1, r3
 800042e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000432:	4338      	orrs	r0, r7
 8000434:	0c01      	lsrs	r1, r0, #16
 8000436:	fbb3 f7fe 	udiv	r7, r3, lr
 800043a:	fa1f f885 	uxth.w	r8, r5
 800043e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000442:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000446:	fb07 f308 	mul.w	r3, r7, r8
 800044a:	428b      	cmp	r3, r1
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x256>
 8000452:	1869      	adds	r1, r5, r1
 8000454:	f107 3cff 	add.w	ip, r7, #4294967295
 8000458:	d22f      	bcs.n	80004ba <__udivmoddi4+0x2ae>
 800045a:	428b      	cmp	r3, r1
 800045c:	d92d      	bls.n	80004ba <__udivmoddi4+0x2ae>
 800045e:	3f02      	subs	r7, #2
 8000460:	4429      	add	r1, r5
 8000462:	1acb      	subs	r3, r1, r3
 8000464:	b281      	uxth	r1, r0
 8000466:	fbb3 f0fe 	udiv	r0, r3, lr
 800046a:	fb0e 3310 	mls	r3, lr, r0, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb00 f308 	mul.w	r3, r0, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x27e>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000480:	d217      	bcs.n	80004b2 <__udivmoddi4+0x2a6>
 8000482:	428b      	cmp	r3, r1
 8000484:	d915      	bls.n	80004b2 <__udivmoddi4+0x2a6>
 8000486:	3802      	subs	r0, #2
 8000488:	4429      	add	r1, r5
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000490:	e73b      	b.n	800030a <__udivmoddi4+0xfe>
 8000492:	4637      	mov	r7, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e709      	b.n	80002ac <__udivmoddi4+0xa0>
 8000498:	4607      	mov	r7, r0
 800049a:	e6e7      	b.n	800026c <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x8c>
 80004a0:	4541      	cmp	r1, r8
 80004a2:	d2ab      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a8:	eb69 020e 	sbc.w	r2, r9, lr
 80004ac:	3801      	subs	r0, #1
 80004ae:	4613      	mov	r3, r2
 80004b0:	e7a4      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b2:	4660      	mov	r0, ip
 80004b4:	e7e9      	b.n	800048a <__udivmoddi4+0x27e>
 80004b6:	4618      	mov	r0, r3
 80004b8:	e795      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004ba:	4667      	mov	r7, ip
 80004bc:	e7d1      	b.n	8000462 <__udivmoddi4+0x256>
 80004be:	4681      	mov	r9, r0
 80004c0:	e77c      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c2:	3802      	subs	r0, #2
 80004c4:	442c      	add	r4, r5
 80004c6:	e747      	b.n	8000358 <__udivmoddi4+0x14c>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	442b      	add	r3, r5
 80004ce:	e72f      	b.n	8000330 <__udivmoddi4+0x124>
 80004d0:	4638      	mov	r0, r7
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xda>
 80004d4:	4637      	mov	r7, r6
 80004d6:	e6e9      	b.n	80002ac <__udivmoddi4+0xa0>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	4b28      	ldr	r3, [pc, #160]	; (8000594 <MX_GPIO_Init+0xb8>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a27      	ldr	r2, [pc, #156]	; (8000594 <MX_GPIO_Init+0xb8>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b25      	ldr	r3, [pc, #148]	; (8000594 <MX_GPIO_Init+0xb8>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b22      	ldr	r3, [pc, #136]	; (8000594 <MX_GPIO_Init+0xb8>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a21      	ldr	r2, [pc, #132]	; (8000594 <MX_GPIO_Init+0xb8>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <MX_GPIO_Init+0xb8>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <MX_GPIO_Init+0xb8>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4a1b      	ldr	r2, [pc, #108]	; (8000594 <MX_GPIO_Init+0xb8>)
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <MX_GPIO_Init+0xb8>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2108      	movs	r1, #8
 800053e:	4816      	ldr	r0, [pc, #88]	; (8000598 <MX_GPIO_Init+0xbc>)
 8000540:	f000 fde6 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Camera_Hotshoe_Pin;
 8000544:	2302      	movs	r3, #2
 8000546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_GPIO_Init+0xc0>)
 800054a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800054c:	2301      	movs	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Camera_Hotshoe_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	4619      	mov	r1, r3
 8000556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055a:	f000 fc67 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED3_Pin;
 800055e:	2308      	movs	r3, #8
 8000560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	4619      	mov	r1, r3
 8000574:	4808      	ldr	r0, [pc, #32]	; (8000598 <MX_GPIO_Init+0xbc>)
 8000576:	f000 fc59 	bl	8000e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2101      	movs	r1, #1
 800057e:	2007      	movs	r0, #7
 8000580:	f000 fbdd 	bl	8000d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000584:	2007      	movs	r0, #7
 8000586:	f000 fbf6 	bl	8000d76 <HAL_NVIC_EnableIRQ>

}
 800058a:	bf00      	nop
 800058c:	3720      	adds	r7, #32
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000
 8000598:	48000400 	.word	0x48000400
 800059c:	10110000 	.word	0x10110000

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fa7f 	bl	8000aa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f80e 	bl	80005c8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init(); // Camera Hotshoe interrupt pin
 80005ac:	f7ff ff96 	bl	80004dc <MX_GPIO_Init>
  MX_USART1_UART_Init(); // GPS receive init. Read bytes in IT
 80005b0:	f000 f952 	bl	8000858 <MX_USART1_UART_Init>
  MX_USART2_UART_Init(); // ST-Link (USB) Init. Used for transferring last GPS data when Camera Hotshoe interrupts
 80005b4:	f000 f984 	bl	80008c0 <MX_USART2_UART_Init>
//  HAL_UART_Receive_IT(&huart1, &byte, 1); // enable Receive Data register not empty interrupt
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2108      	movs	r1, #8
 80005bc:	4801      	ldr	r0, [pc, #4]	; (80005c4 <main+0x24>)
 80005be:	f000 fda7 	bl	8001110 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <main+0x22>
 80005c4:	48000400 	.word	0x48000400

080005c8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b0a4      	sub	sp, #144	; 0x90
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005d2:	2244      	movs	r2, #68	; 0x44
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fd4e 	bl	8003078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2234      	movs	r2, #52	; 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fd40 	bl	8003078 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fc:	f000 fdc6 	bl	800118c <HAL_PWREx_ControlVoltageScaling>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	bf14      	ite	ne
 8000606:	2301      	movne	r3, #1
 8000608:	2300      	moveq	r3, #0
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 8000610:	f000 f876 	bl	8000700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061e:	2340      	movs	r3, #64	; 0x40
 8000620:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	2302      	movs	r3, #2
 8000628:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000630:	230a      	movs	r3, #10
 8000632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fdf6 	bl	8001238 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	bf14      	ite	ne
 8000652:	2301      	movne	r3, #1
 8000654:	2300      	moveq	r3, #0
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 800065c:	f000 f850 	bl	8000700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2303      	movs	r3, #3
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000674:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000678:	2104      	movs	r1, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fa42 	bl	8001b04 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	bf14      	ite	ne
 8000686:	2301      	movne	r3, #1
 8000688:	2300      	moveq	r3, #0
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8000690:	f000 f836 	bl	8000700 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000694:	2303      	movs	r3, #3
 8000696:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fc32 	bl	8001f0c <HAL_RCCEx_PeriphCLKConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	bf14      	ite	ne
 80006ae:	2301      	movne	r3, #1
 80006b0:	2300      	moveq	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <_Z18SystemClock_Configv+0xf4>
  {
    Error_Handler();
 80006b8:	f000 f822 	bl	8000700 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3790      	adds	r7, #144	; 0x90
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_1)
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d10c      	bne.n	80006ee <HAL_GPIO_EXTI_Callback+0x2a>
  {
	const char *msg = "Hello World!\n\r";
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x34>)
 80006d6:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
 80006d8:	68f8      	ldr	r0, [r7, #12]
 80006da:	f7ff fd77 	bl	80001cc <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e6:	68f9      	ldr	r1, [r7, #12]
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <HAL_GPIO_EXTI_Callback+0x38>)
 80006ea:	f001 fde3 	bl	80022b4 <HAL_UART_Transmit>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	080030a0 	.word	0x080030a0
 80006fc:	200000a8 	.word	0x200000a8

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x44>)
 8000718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <HAL_MspInit+0x44>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6613      	str	r3, [r2, #96]	; 0x60
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_MspInit+0x44>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_MspInit+0x44>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <HAL_MspInit+0x44>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	6593      	str	r3, [r2, #88]	; 0x58
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_MspInit+0x44>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ac:	f000 f9ce 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80007b8:	2002      	movs	r0, #2
 80007ba:	f000 fcc1 	bl	8001140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <USART1_IRQHandler+0x10>)
 80007ca:	f001 fe07 	bl	80023dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000028 	.word	0x20000028

080007d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <USART2_IRQHandler+0x10>)
 80007de:	f001 fdfd 	bl	80023dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000a8 	.word	0x200000a8

080007ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <SystemInit+0x64>)
 80007f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f6:	4a16      	ldr	r2, [pc, #88]	; (8000850 <SystemInit+0x64>)
 80007f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <SystemInit+0x68>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a13      	ldr	r2, [pc, #76]	; (8000854 <SystemInit+0x68>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <SystemInit+0x68>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <SystemInit+0x68>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <SystemInit+0x68>)
 8000818:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800081c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000820:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <SystemInit+0x68>)
 8000824:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000828:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <SystemInit+0x68>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a09      	ldr	r2, [pc, #36]	; (8000854 <SystemInit+0x68>)
 8000830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000834:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <SystemInit+0x68>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <SystemInit+0x64>)
 800083e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000842:	609a      	str	r2, [r3, #8]
#endif
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00
 8000854:	40021000 	.word	0x40021000

08000858 <MX_USART1_UART_Init>:
#define HAL_UART_MIN_TX_SIZE 2048
#endif

extern "C" {
void MX_USART1_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_USART1_UART_Init+0x60>)
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <MX_USART1_UART_Init+0x64>)
 8000860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_USART1_UART_Init+0x60>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_USART1_UART_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART1_UART_Init+0x60>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART1_UART_Init+0x60>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART1_UART_Init+0x60>)
 800087e:	2204      	movs	r2, #4
 8000880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_USART1_UART_Init+0x60>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART1_UART_Init+0x60>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_USART1_UART_Init+0x60>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART1_UART_Init+0x60>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089a:	4807      	ldr	r0, [pc, #28]	; (80008b8 <MX_USART1_UART_Init+0x60>)
 800089c:	f001 fcbc 	bl	8002218 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	bf14      	ite	ne
 80008a6:	2301      	movne	r3, #1
 80008a8:	2300      	moveq	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 80008b0:	f7ff ff26 	bl	8000700 <Error_Handler>
  }

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000028 	.word	0x20000028
 80008bc:	40013800 	.word	0x40013800

080008c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_USART2_UART_Init+0x60>)
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <MX_USART2_UART_Init+0x64>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_USART2_UART_Init+0x60>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_USART2_UART_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART2_UART_Init+0x60>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_USART2_UART_Init+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART2_UART_Init+0x60>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <MX_USART2_UART_Init+0x60>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART2_UART_Init+0x60>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_USART2_UART_Init+0x60>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART2_UART_Init+0x60>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000902:	4807      	ldr	r0, [pc, #28]	; (8000920 <MX_USART2_UART_Init+0x60>)
 8000904:	f001 fc88 	bl	8002218 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	bf14      	ite	ne
 800090e:	2301      	movne	r3, #1
 8000910:	2300      	moveq	r3, #0
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000918:	f7ff fef2 	bl	8000700 <Error_Handler>
  }

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000a8 	.word	0x200000a8
 8000924:	40004400 	.word	0x40004400

08000928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	; 0x30
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a40      	ldr	r2, [pc, #256]	; (8000a48 <HAL_UART_MspInit+0x120>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d132      	bne.n	80009b0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800094a:	4b40      	ldr	r3, [pc, #256]	; (8000a4c <HAL_UART_MspInit+0x124>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094e:	4a3f      	ldr	r2, [pc, #252]	; (8000a4c <HAL_UART_MspInit+0x124>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6613      	str	r3, [r2, #96]	; 0x60
 8000956:	4b3d      	ldr	r3, [pc, #244]	; (8000a4c <HAL_UART_MspInit+0x124>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b3a      	ldr	r3, [pc, #232]	; (8000a4c <HAL_UART_MspInit+0x124>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a39      	ldr	r2, [pc, #228]	; (8000a4c <HAL_UART_MspInit+0x124>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <HAL_UART_MspInit+0x124>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 800097a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800097e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800098c:	2307      	movs	r3, #7
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f000 fa47 	bl	8000e2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2102      	movs	r1, #2
 80009a2:	2025      	movs	r0, #37	; 0x25
 80009a4:	f000 f9cb 	bl	8000d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009a8:	2025      	movs	r0, #37	; 0x25
 80009aa:	f000 f9e4 	bl	8000d76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009ae:	e047      	b.n	8000a40 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a26      	ldr	r2, [pc, #152]	; (8000a50 <HAL_UART_MspInit+0x128>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d142      	bne.n	8000a40 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <HAL_UART_MspInit+0x124>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <HAL_UART_MspInit+0x124>)
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c4:	6593      	str	r3, [r2, #88]	; 0x58
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <HAL_UART_MspInit+0x124>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_UART_MspInit+0x124>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <HAL_UART_MspInit+0x124>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_UART_MspInit+0x124>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_Link_TX_Pin;
 80009ea:	2304      	movs	r3, #4
 80009ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fa:	2307      	movs	r3, #7
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ST_Link_TX_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a08:	f000 fa10 	bl	8000e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ST_Link_RX_Pin;
 8000a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ST_Link_RX_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f000 f9fe 	bl	8000e2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2103      	movs	r1, #3
 8000a34:	2026      	movs	r0, #38	; 0x26
 8000a36:	f000 f982 	bl	8000d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a3a:	2026      	movs	r0, #38	; 0x26
 8000a3c:	f000 f99b 	bl	8000d76 <HAL_NVIC_EnableIRQ>
}
 8000a40:	bf00      	nop
 8000a42:	3730      	adds	r7, #48	; 0x30
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40013800 	.word	0x40013800
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40004400 	.word	0x40004400

08000a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a5a:	e003      	b.n	8000a64 <LoopCopyDataInit>

08000a5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a62:	3104      	adds	r1, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a6c:	d3f6      	bcc.n	8000a5c <CopyDataInit>
	ldr	r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a70:	e002      	b.n	8000a78 <LoopFillZerobss>

08000a72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a74:	f842 3b04 	str.w	r3, [r2], #4

08000a78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <LoopForever+0x16>)
	cmp	r2, r3
 8000a7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a7c:	d3f9      	bcc.n	8000a72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a7e:	f7ff feb5 	bl	80007ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f002 fad5 	bl	8003030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a86:	f7ff fd8b 	bl	80005a0 <main>

08000a8a <LoopForever>:

LoopForever:
    b LoopForever
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a8c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000a90:	08003108 	.word	0x08003108
	ldr	r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a98:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a9c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000aa0:	2000012c 	.word	0x2000012c

08000aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_2_IRQHandler>

08000aa6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aac:	2300      	movs	r3, #0
 8000aae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f939 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 f80e 	bl	8000ad8 <HAL_InitTick>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d002      	beq.n	8000ac8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	71fb      	strb	r3, [r7, #7]
 8000ac6:	e001      	b.n	8000acc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac8:	f7ff fe22 	bl	8000710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_InitTick+0x68>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d022      	beq.n	8000b32 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_InitTick+0x6c>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <HAL_InitTick+0x68>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000af8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 f946 	bl	8000d92 <HAL_SYSTICK_Config>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10f      	bne.n	8000b2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	d809      	bhi.n	8000b26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b12:	2200      	movs	r2, #0
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1a:	f000 f910 	bl	8000d3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_InitTick+0x70>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	e007      	b.n	8000b36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	e004      	b.n	8000b36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73fb      	strb	r3, [r7, #15]
 8000b30:	e001      	b.n	8000b36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_IncTick+0x1c>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x20>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a03      	ldr	r2, [pc, #12]	; (8000b68 <HAL_IncTick+0x1c>)
 8000b5c:	6013      	str	r3, [r2, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	20000128 	.word	0x20000128
 8000b6c:	20000008 	.word	0x20000008

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000128 	.word	0x20000128

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db0b      	blt.n	8000c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 021f 	and.w	r2, r3, #31
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <__NVIC_EnableIRQ+0x38>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	; (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff8e 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff29 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff3e 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff8e 	bl	8000c7c <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5d 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff31 	bl	8000bec <__NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffa2 	bl	8000ce4 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b084      	sub	sp, #16
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d005      	beq.n	8000dce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e029      	b.n	8000e22 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 020e 	bic.w	r2, r2, #14
 8000ddc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 0201 	bic.w	r2, r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f003 021c 	and.w	r2, r3, #28
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000e00:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2201      	movs	r2, #1
 8000e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	4798      	blx	r3
    }
  }
  return status;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e14e      	b.n	80010da <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	2101      	movs	r1, #1
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 8140 	beq.w	80010d4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d00b      	beq.n	8000e74 <HAL_GPIO_Init+0x48>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d007      	beq.n	8000e74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e68:	2b11      	cmp	r3, #17
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b12      	cmp	r3, #18
 8000e72:	d130      	bne.n	8000ed6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eaa:	2201      	movs	r2, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	f003 0201 	and.w	r2, r3, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0xea>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b12      	cmp	r3, #18
 8000f14:	d123      	bne.n	8000f5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691a      	ldr	r2, [r3, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	6939      	ldr	r1, [r7, #16]
 8000f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0203 	and.w	r2, r3, #3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 809a 	beq.w	80010d4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa0:	4b55      	ldr	r3, [pc, #340]	; (80010f8 <HAL_GPIO_Init+0x2cc>)
 8000fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa4:	4a54      	ldr	r2, [pc, #336]	; (80010f8 <HAL_GPIO_Init+0x2cc>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6613      	str	r3, [r2, #96]	; 0x60
 8000fac:	4b52      	ldr	r3, [pc, #328]	; (80010f8 <HAL_GPIO_Init+0x2cc>)
 8000fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fb8:	4a50      	ldr	r2, [pc, #320]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220f      	movs	r2, #15
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fe2:	d013      	beq.n	800100c <HAL_GPIO_Init+0x1e0>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a46      	ldr	r2, [pc, #280]	; (8001100 <HAL_GPIO_Init+0x2d4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d00d      	beq.n	8001008 <HAL_GPIO_Init+0x1dc>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a45      	ldr	r2, [pc, #276]	; (8001104 <HAL_GPIO_Init+0x2d8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d007      	beq.n	8001004 <HAL_GPIO_Init+0x1d8>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a44      	ldr	r2, [pc, #272]	; (8001108 <HAL_GPIO_Init+0x2dc>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d101      	bne.n	8001000 <HAL_GPIO_Init+0x1d4>
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e006      	b.n	800100e <HAL_GPIO_Init+0x1e2>
 8001000:	2307      	movs	r3, #7
 8001002:	e004      	b.n	800100e <HAL_GPIO_Init+0x1e2>
 8001004:	2302      	movs	r3, #2
 8001006:	e002      	b.n	800100e <HAL_GPIO_Init+0x1e2>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <HAL_GPIO_Init+0x1e2>
 800100c:	2300      	movs	r3, #0
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	f002 0203 	and.w	r2, r2, #3
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4093      	lsls	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800101e:	4937      	ldr	r1, [pc, #220]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800102c:	4b37      	ldr	r3, [pc, #220]	; (800110c <HAL_GPIO_Init+0x2e0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001050:	4a2e      	ldr	r2, [pc, #184]	; (800110c <HAL_GPIO_Init+0x2e0>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <HAL_GPIO_Init+0x2e0>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800107a:	4a24      	ldr	r2, [pc, #144]	; (800110c <HAL_GPIO_Init+0x2e0>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_GPIO_Init+0x2e0>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a4:	4a19      	ldr	r2, [pc, #100]	; (800110c <HAL_GPIO_Init+0x2e0>)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <HAL_GPIO_Init+0x2e0>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <HAL_GPIO_Init+0x2e0>)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa22 f303 	lsr.w	r3, r2, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f47f aea9 	bne.w	8000e3c <HAL_GPIO_Init+0x10>
  }
}
 80010ea:	bf00      	nop
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010000 	.word	0x40010000
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800
 8001108:	48000c00 	.word	0x48000c00
 800110c:	40010400 	.word	0x40010400

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800112c:	e002      	b.n	8001134 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800114c:	695a      	ldr	r2, [r3, #20]
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	4013      	ands	r3, r2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fab0 	bl	80006c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <HAL_PWREx_GetVoltageRange+0x18>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40007000 	.word	0x40007000

0800118c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800119a:	d130      	bne.n	80011fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a8:	d038      	beq.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011b2:	4a1e      	ldr	r2, [pc, #120]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2232      	movs	r2, #50	; 0x32
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	3301      	adds	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d0:	e002      	b.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e4:	d102      	bne.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f2      	bne.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f8:	d110      	bne.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e00f      	b.n	800121e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800120a:	d007      	beq.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001214:	4a05      	ldr	r2, [pc, #20]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40007000 	.word	0x40007000
 8001230:	20000000 	.word	0x20000000
 8001234:	431bde83 	.word	0x431bde83

08001238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	f000 bc56 	b.w	8001af8 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800124c:	4ba1      	ldr	r3, [pc, #644]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 030c 	and.w	r3, r3, #12
 8001254:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001256:	4b9f      	ldr	r3, [pc, #636]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80e6 	beq.w	800143a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <HAL_RCC_OscConfig+0x4c>
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	2b0c      	cmp	r3, #12
 8001278:	f040 808d 	bne.w	8001396 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2b01      	cmp	r3, #1
 8001280:	f040 8089 	bne.w	8001396 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001284:	4b93      	ldr	r3, [pc, #588]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <HAL_RCC_OscConfig+0x66>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	f000 bc2d 	b.w	8001af8 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012a2:	4b8c      	ldr	r3, [pc, #560]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d004      	beq.n	80012b8 <HAL_RCC_OscConfig+0x80>
 80012ae:	4b89      	ldr	r3, [pc, #548]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b6:	e005      	b.n	80012c4 <HAL_RCC_OscConfig+0x8c>
 80012b8:	4b86      	ldr	r3, [pc, #536]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80012ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d224      	bcs.n	8001312 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fdbd 	bl	8001e4c <RCC_SetFlashLatencyFromMSIRange>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	f000 bc0d 	b.w	8001af8 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012de:	4b7d      	ldr	r3, [pc, #500]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a7c      	ldr	r2, [pc, #496]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b7a      	ldr	r3, [pc, #488]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	4977      	ldr	r1, [pc, #476]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012fc:	4b75      	ldr	r3, [pc, #468]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	4972      	ldr	r1, [pc, #456]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
 8001310:	e025      	b.n	800135e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001312:	4b70      	ldr	r3, [pc, #448]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6f      	ldr	r2, [pc, #444]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	496a      	ldr	r1, [pc, #424]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 800132c:	4313      	orrs	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001330:	4b68      	ldr	r3, [pc, #416]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	4965      	ldr	r1, [pc, #404]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d109      	bne.n	800135e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fd7c 	bl	8001e4c <RCC_SetFlashLatencyFromMSIRange>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e3cc      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800135e:	f000 fcb3 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001362:	4601      	mov	r1, r0
 8001364:	4b5b      	ldr	r3, [pc, #364]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	4a5a      	ldr	r2, [pc, #360]	; (80014d8 <HAL_RCC_OscConfig+0x2a0>)
 8001370:	5cd3      	ldrb	r3, [r2, r3]
 8001372:	f003 031f 	and.w	r3, r3, #31
 8001376:	fa21 f303 	lsr.w	r3, r1, r3
 800137a:	4a58      	ldr	r2, [pc, #352]	; (80014dc <HAL_RCC_OscConfig+0x2a4>)
 800137c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800137e:	4b58      	ldr	r3, [pc, #352]	; (80014e0 <HAL_RCC_OscConfig+0x2a8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fba8 	bl	8000ad8 <HAL_InitTick>
 8001388:	4603      	mov	r3, r0
 800138a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d052      	beq.n	8001438 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001392:	7dfb      	ldrb	r3, [r7, #23]
 8001394:	e3b0      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d032      	beq.n	8001404 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800139e:	4b4d      	ldr	r3, [pc, #308]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a4c      	ldr	r2, [pc, #304]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013aa:	f7ff fbe1 	bl	8000b70 <HAL_GetTick>
 80013ae:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b2:	f7ff fbdd 	bl	8000b70 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e399      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013c4:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d0:	4b40      	ldr	r3, [pc, #256]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a3f      	ldr	r2, [pc, #252]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	493a      	ldr	r1, [pc, #232]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ee:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	4935      	ldr	r1, [pc, #212]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
 8001402:	e01a      	b.n	800143a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001404:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001410:	f7ff fbae 	bl	8000b70 <HAL_GetTick>
 8001414:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001418:	f7ff fbaa 	bl	8000b70 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e366      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x1e0>
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001438:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d073      	beq.n	800152e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	2b08      	cmp	r3, #8
 800144a:	d005      	beq.n	8001458 <HAL_RCC_OscConfig+0x220>
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	2b0c      	cmp	r3, #12
 8001450:	d10e      	bne.n	8001470 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d10b      	bne.n	8001470 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d063      	beq.n	800152c <HAL_RCC_OscConfig+0x2f4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d15f      	bne.n	800152c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e343      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001478:	d106      	bne.n	8001488 <HAL_RCC_OscConfig+0x250>
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e01d      	b.n	80014c4 <HAL_RCC_OscConfig+0x28c>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x274>
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0x28c>
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80014b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <HAL_RCC_OscConfig+0x29c>)
 80014be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01b      	beq.n	8001504 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fb50 	bl	8000b70 <HAL_GetTick>
 80014d0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d2:	e010      	b.n	80014f6 <HAL_RCC_OscConfig+0x2be>
 80014d4:	40021000 	.word	0x40021000
 80014d8:	080030b0 	.word	0x080030b0
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fb44 	bl	8000b70 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e300      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f6:	4ba0      	ldr	r3, [pc, #640]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x2ac>
 8001502:	e014      	b.n	800152e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fb34 	bl	8000b70 <HAL_GetTick>
 8001508:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fb30 	bl	8000b70 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e2ec      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800151e:	4b96      	ldr	r3, [pc, #600]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x2d4>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d060      	beq.n	80015fc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	2b04      	cmp	r3, #4
 800153e:	d005      	beq.n	800154c <HAL_RCC_OscConfig+0x314>
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	2b0c      	cmp	r3, #12
 8001544:	d119      	bne.n	800157a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d116      	bne.n	800157a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800154c:	4b8a      	ldr	r3, [pc, #552]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_RCC_OscConfig+0x32c>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e2c9      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	4b84      	ldr	r3, [pc, #528]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	061b      	lsls	r3, r3, #24
 8001572:	4981      	ldr	r1, [pc, #516]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001578:	e040      	b.n	80015fc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d023      	beq.n	80015ca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001582:	4b7d      	ldr	r3, [pc, #500]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7c      	ldr	r2, [pc, #496]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 8001588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff faef 	bl	8000b70 <HAL_GetTick>
 8001592:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff faeb 	bl	8000b70 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e2a7      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a8:	4b73      	ldr	r3, [pc, #460]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	4b70      	ldr	r3, [pc, #448]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	061b      	lsls	r3, r3, #24
 80015c2:	496d      	ldr	r1, [pc, #436]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
 80015c8:	e018      	b.n	80015fc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ca:	4b6b      	ldr	r3, [pc, #428]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a6a      	ldr	r2, [pc, #424]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 80015d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff facb 	bl	8000b70 <HAL_GetTick>
 80015da:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff fac7 	bl	8000b70 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e283      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f0:	4b61      	ldr	r3, [pc, #388]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f0      	bne.n	80015de <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d07f      	beq.n	8001708 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d05f      	beq.n	80016d0 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001610:	4b59      	ldr	r3, [pc, #356]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 8001612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001616:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699a      	ldr	r2, [r3, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	429a      	cmp	r2, r3
 8001624:	d037      	beq.n	8001696 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e25c      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01b      	beq.n	8001680 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001648:	4b4b      	ldr	r3, [pc, #300]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 800164a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800164e:	4a4a      	ldr	r2, [pc, #296]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001658:	f7ff fa8a 	bl	8000b70 <HAL_GetTick>
 800165c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fa86 	bl	8000b70 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b11      	cmp	r3, #17
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e242      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 8001674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1ef      	bne.n	8001660 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001680:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 8001682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001686:	f023 0210 	bic.w	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	493a      	ldr	r1, [pc, #232]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 8001690:	4313      	orrs	r3, r2
 8001692:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 8001698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169c:	4a36      	ldr	r2, [pc, #216]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a6:	f7ff fa63 	bl	8000b70 <HAL_GetTick>
 80016aa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ae:	f7ff fa5f 	bl	8000b70 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b11      	cmp	r3, #17
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e21b      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 80016c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0ef      	beq.n	80016ae <HAL_RCC_OscConfig+0x476>
 80016ce:	e01b      	b.n	8001708 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 80016d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d6:	4a28      	ldr	r2, [pc, #160]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e0:	f7ff fa46 	bl	8000b70 <HAL_GetTick>
 80016e4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e8:	f7ff fa42 	bl	8000b70 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b11      	cmp	r3, #17
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e1fe      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 80016fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ef      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 80c1 	beq.w	8001898 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10e      	bne.n	8001746 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	4a12      	ldr	r2, [pc, #72]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 800172e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001732:	6593      	str	r3, [r2, #88]	; 0x58
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_RCC_OscConfig+0x540>)
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001740:	2301      	movs	r3, #1
 8001742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <HAL_RCC_OscConfig+0x544>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d11c      	bne.n	800178c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_RCC_OscConfig+0x544>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a09      	ldr	r2, [pc, #36]	; (800177c <HAL_RCC_OscConfig+0x544>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175e:	f7ff fa07 	bl	8000b70 <HAL_GetTick>
 8001762:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001764:	e00c      	b.n	8001780 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001766:	f7ff fa03 	bl	8000b70 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d905      	bls.n	8001780 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e1bf      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
 8001778:	40021000 	.word	0x40021000
 800177c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001780:	4bb1      	ldr	r3, [pc, #708]	; (8001a48 <HAL_RCC_OscConfig+0x810>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ec      	beq.n	8001766 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d02c      	beq.n	80017f2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001798:	4bac      	ldr	r3, [pc, #688]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017aa:	49a8      	ldr	r1, [pc, #672]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d010      	beq.n	80017e0 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017be:	4ba3      	ldr	r3, [pc, #652]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80017c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c4:	4aa1      	ldr	r2, [pc, #644]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017ce:	4b9f      	ldr	r3, [pc, #636]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80017d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d4:	4a9d      	ldr	r2, [pc, #628]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017de:	e018      	b.n	8001812 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017e0:	4b9a      	ldr	r3, [pc, #616]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e6:	4a99      	ldr	r2, [pc, #612]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f0:	e00f      	b.n	8001812 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017f2:	4b96      	ldr	r3, [pc, #600]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f8:	4a94      	ldr	r2, [pc, #592]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001802:	4b92      	ldr	r3, [pc, #584]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 8001804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001808:	4a90      	ldr	r2, [pc, #576]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 800180a:	f023 0304 	bic.w	r3, r3, #4
 800180e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d016      	beq.n	8001848 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181a:	f7ff f9a9 	bl	8000b70 <HAL_GetTick>
 800181e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff f9a5 	bl	8000b70 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e15f      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001838:	4b84      	ldr	r3, [pc, #528]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0ed      	beq.n	8001822 <HAL_RCC_OscConfig+0x5ea>
 8001846:	e01d      	b.n	8001884 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff f992 	bl	8000b70 <HAL_GetTick>
 800184c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800184e:	e00a      	b.n	8001866 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001850:	f7ff f98e 	bl	8000b70 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	; 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e148      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001866:	4b79      	ldr	r3, [pc, #484]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 8001868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ed      	bne.n	8001850 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001874:	4b75      	ldr	r3, [pc, #468]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 8001876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187a:	4a74      	ldr	r2, [pc, #464]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 800187c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188c:	4b6f      	ldr	r3, [pc, #444]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	4a6e      	ldr	r2, [pc, #440]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 8001892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001896:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d03c      	beq.n	800191e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01c      	beq.n	80018e6 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018ac:	4b67      	ldr	r3, [pc, #412]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80018ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b2:	4a66      	ldr	r2, [pc, #408]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff f958 	bl	8000b70 <HAL_GetTick>
 80018c0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018c4:	f7ff f954 	bl	8000b70 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e110      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018d6:	4b5d      	ldr	r3, [pc, #372]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80018d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0ef      	beq.n	80018c4 <HAL_RCC_OscConfig+0x68c>
 80018e4:	e01b      	b.n	800191e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018e6:	4b59      	ldr	r3, [pc, #356]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80018e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ec:	4a57      	ldr	r2, [pc, #348]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff f93b 	bl	8000b70 <HAL_GetTick>
 80018fa:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018fe:	f7ff f937 	bl	8000b70 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0f3      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001910:	4b4e      	ldr	r3, [pc, #312]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 8001912:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ef      	bne.n	80018fe <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80e7 	beq.w	8001af6 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	2b02      	cmp	r3, #2
 800192e:	f040 80b7 	bne.w	8001aa0 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001932:	4b46      	ldr	r3, [pc, #280]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0203 	and.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	429a      	cmp	r2, r3
 8001944:	d124      	bne.n	8001990 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001950:	3b01      	subs	r3, #1
 8001952:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d11b      	bne.n	8001990 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001962:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d113      	bne.n	8001990 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001972:	085b      	lsrs	r3, r3, #1
 8001974:	3b01      	subs	r3, #1
 8001976:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d109      	bne.n	8001990 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	085b      	lsrs	r3, r3, #1
 8001988:	3b01      	subs	r3, #1
 800198a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d061      	beq.n	8001a54 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d056      	beq.n	8001a44 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001996:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 800199c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019a2:	f7ff f8e5 	bl	8000b70 <HAL_GetTick>
 80019a6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff f8e1 	bl	8000b70 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e09d      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f0      	bne.n	80019aa <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c8:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <HAL_RCC_OscConfig+0x818>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019d8:	3a01      	subs	r2, #1
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	4311      	orrs	r1, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019e2:	0212      	lsls	r2, r2, #8
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019ea:	0852      	lsrs	r2, r2, #1
 80019ec:	3a01      	subs	r2, #1
 80019ee:	0552      	lsls	r2, r2, #21
 80019f0:	4311      	orrs	r1, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019f6:	0852      	lsrs	r2, r2, #1
 80019f8:	3a01      	subs	r2, #1
 80019fa:	0652      	lsls	r2, r2, #25
 80019fc:	430a      	orrs	r2, r1
 80019fe:	4913      	ldr	r1, [pc, #76]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 8001a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 8001a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a1c:	f7ff f8a8 	bl	8000b70 <HAL_GetTick>
 8001a20:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff f8a4 	bl	8000b70 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e060      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_OscConfig+0x814>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a42:	e058      	b.n	8001af6 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e057      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a54:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <HAL_RCC_OscConfig+0x8c8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d14a      	bne.n	8001af6 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_RCC_OscConfig+0x8c8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <HAL_RCC_OscConfig+0x8c8>)
 8001a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCC_OscConfig+0x8c8>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4a23      	ldr	r2, [pc, #140]	; (8001b00 <HAL_RCC_OscConfig+0x8c8>)
 8001a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a78:	f7ff f87a 	bl	8000b70 <HAL_GetTick>
 8001a7c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff f876 	bl	8000b70 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e032      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_RCC_OscConfig+0x8c8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x848>
 8001a9e:	e02a      	b.n	8001af6 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d025      	beq.n	8001af2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <HAL_RCC_OscConfig+0x8c8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <HAL_RCC_OscConfig+0x8c8>)
 8001aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ab0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_RCC_OscConfig+0x8c8>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <HAL_RCC_OscConfig+0x8c8>)
 8001ab8:	f023 0303 	bic.w	r3, r3, #3
 8001abc:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_RCC_OscConfig+0x8c8>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_RCC_OscConfig+0x8c8>)
 8001ac4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ac8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff f851 	bl	8000b70 <HAL_GetTick>
 8001ace:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7ff f84d 	bl	8000b70 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e009      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_RCC_OscConfig+0x8c8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x89a>
 8001af0:	e001      	b.n	8001af6 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3728      	adds	r7, #40	; 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40021000 	.word	0x40021000

08001b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0c8      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b18:	4b66      	ldr	r3, [pc, #408]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d910      	bls.n	8001b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b63      	ldr	r3, [pc, #396]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 0207 	bic.w	r2, r3, #7
 8001b2e:	4961      	ldr	r1, [pc, #388]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b36:	4b5f      	ldr	r3, [pc, #380]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0b0      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d04c      	beq.n	8001bee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5c:	4b56      	ldr	r3, [pc, #344]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d121      	bne.n	8001bac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e09e      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b74:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d115      	bne.n	8001bac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e092      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b8c:	4b4a      	ldr	r3, [pc, #296]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e086      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b9c:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e07e      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bac:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 0203 	bic.w	r2, r3, #3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	493f      	ldr	r1, [pc, #252]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bbe:	f7fe ffd7 	bl	8000b70 <HAL_GetTick>
 8001bc2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc6:	f7fe ffd3 	bl	8000b70 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e066      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 020c 	and.w	r2, r3, #12
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d1eb      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d008      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	492c      	ldr	r1, [pc, #176]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d210      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 0207 	bic.w	r2, r3, #7
 8001c22:	4924      	ldr	r1, [pc, #144]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e036      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4918      	ldr	r1, [pc, #96]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4910      	ldr	r1, [pc, #64]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c7a:	f000 f825 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c7e:	4601      	mov	r1, r0
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c8c:	5cd3      	ldrb	r3, [r2, r3]
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	fa21 f303 	lsr.w	r3, r1, r3
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe ff1a 	bl	8000ad8 <HAL_InitTick>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ca8:	7afb      	ldrb	r3, [r7, #11]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	080030b0 	.word	0x080030b0
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4b3a      	ldr	r3, [pc, #232]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x34>
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d121      	bne.n	8001d3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d11e      	bne.n	8001d3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cfc:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d08:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e005      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d18:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d24:	4a2a      	ldr	r2, [pc, #168]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10d      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	e004      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d4c:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b0c      	cmp	r3, #12
 8001d54:	d133      	bne.n	8001dbe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d002      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0xa4>
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d003      	beq.n	8001d72 <HAL_RCC_GetSysClockFreq+0xaa>
 8001d6a:	e005      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d6e:	617b      	str	r3, [r7, #20]
      break;
 8001d70:	e005      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d74:	617b      	str	r3, [r7, #20]
      break;
 8001d76:	e002      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	617b      	str	r3, [r7, #20]
      break;
 8001d7c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	3301      	adds	r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	fb02 f203 	mul.w	r2, r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0e5b      	lsrs	r3, r3, #25
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	3301      	adds	r3, #1
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3724      	adds	r7, #36	; 0x24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	080030c8 	.word	0x080030c8
 8001dd4:	00f42400 	.word	0x00f42400
 8001dd8:	007a1200 	.word	0x007a1200

08001ddc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000000 	.word	0x20000000

08001df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001df8:	f7ff fff0 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001dfc:	4601      	mov	r1, r0
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	080030c0 	.word	0x080030c0

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e24:	f7ff ffda 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001e28:	4601      	mov	r1, r0
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0adb      	lsrs	r3, r3, #11
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e36:	5cd3      	ldrb	r3, [r2, r3]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	080030c0 	.word	0x080030c0

08001e4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e64:	f7ff f984 	bl	8001170 <HAL_PWREx_GetVoltageRange>
 8001e68:	6178      	str	r0, [r7, #20]
 8001e6a:	e014      	b.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e70:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e76:	6593      	str	r3, [r2, #88]	; 0x58
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e84:	f7ff f974 	bl	8001170 <HAL_PWREx_GetVoltageRange>
 8001e88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e9c:	d10b      	bne.n	8001eb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b80      	cmp	r3, #128	; 0x80
 8001ea2:	d919      	bls.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ea8:	d902      	bls.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eaa:	2302      	movs	r3, #2
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	e013      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	e010      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d902      	bls.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	e00a      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b80      	cmp	r3, #128	; 0x80
 8001ec6:	d102      	bne.n	8001ece <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ec8:	2302      	movs	r3, #2
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	e004      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b70      	cmp	r3, #112	; 0x70
 8001ed2:	d101      	bne.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 0207 	bic.w	r2, r3, #7
 8001ee0:	4909      	ldr	r1, [pc, #36]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d001      	beq.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40022000 	.word	0x40022000

08001f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f14:	2300      	movs	r3, #0
 8001f16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f18:	2300      	movs	r3, #0
 8001f1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 809e 	beq.w	8002066 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f2e:	4b46      	ldr	r3, [pc, #280]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00d      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f44:	4b40      	ldr	r3, [pc, #256]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	4a3f      	ldr	r2, [pc, #252]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f50:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f60:	4b3a      	ldr	r3, [pc, #232]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a39      	ldr	r2, [pc, #228]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f6c:	f7fe fe00 	bl	8000b70 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f72:	e009      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f74:	f7fe fdfc 	bl	8000b70 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d902      	bls.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	74fb      	strb	r3, [r7, #19]
        break;
 8001f86:	e005      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f88:	4b30      	ldr	r3, [pc, #192]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ef      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d15a      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f9a:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01e      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d019      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fe2:	4a19      	ldr	r2, [pc, #100]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d016      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7fe fdbc 	bl	8000b70 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffa:	e00b      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7fe fdb8 	bl	8000b70 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d902      	bls.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	74fb      	strb	r3, [r7, #19]
            break;
 8002012:	e006      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0ec      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002022:	7cfb      	ldrb	r3, [r7, #19]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4904      	ldr	r1, [pc, #16]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800203e:	e009      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002040:	7cfb      	ldrb	r3, [r7, #19]
 8002042:	74bb      	strb	r3, [r7, #18]
 8002044:	e006      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002054:	7c7b      	ldrb	r3, [r7, #17]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d105      	bne.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205a:	4b6e      	ldr	r3, [pc, #440]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	4a6d      	ldr	r2, [pc, #436]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002064:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002072:	4b68      	ldr	r3, [pc, #416]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002078:	f023 0203 	bic.w	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4964      	ldr	r1, [pc, #400]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002094:	4b5f      	ldr	r3, [pc, #380]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	f023 020c 	bic.w	r2, r3, #12
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	495c      	ldr	r1, [pc, #368]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020b6:	4b57      	ldr	r3, [pc, #348]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4953      	ldr	r1, [pc, #332]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020d8:	4b4e      	ldr	r3, [pc, #312]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	494b      	ldr	r1, [pc, #300]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020fa:	4b46      	ldr	r3, [pc, #280]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002100:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4942      	ldr	r1, [pc, #264]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800211c:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002122:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	493a      	ldr	r1, [pc, #232]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800213e:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002144:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	4931      	ldr	r1, [pc, #196]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002160:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	4929      	ldr	r1, [pc, #164]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	4920      	ldr	r1, [pc, #128]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d015      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	4918      	ldr	r1, [pc, #96]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021c2:	d105      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a12      	ldr	r2, [pc, #72]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d015      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	490a      	ldr	r1, [pc, #40]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021fa:	d105      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002206:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002208:	7cbb      	ldrb	r3, [r7, #18]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000

08002218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e040      	b.n	80022ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fe fb74 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2224      	movs	r2, #36	; 0x24
 8002244:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0201 	bic.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fa1a 	bl	8002690 <UART_SetConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e022      	b.n	80022ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fd22 	bl	8002cb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fda9 	bl	8002dfc <UART_CheckIdleState>
 80022aa:	4603      	mov	r3, r0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	f040 8081 	bne.w	80023d0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_UART_Transmit+0x26>
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e079      	b.n	80023d2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_UART_Transmit+0x38>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e072      	b.n	80023d2 <HAL_UART_Transmit+0x11e>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2221      	movs	r2, #33	; 0x21
 80022fe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002300:	f7fe fc36 	bl	8000b70 <HAL_GetTick>
 8002304:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	88fa      	ldrh	r2, [r7, #6]
 800230a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	88fa      	ldrh	r2, [r7, #6]
 8002312:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231e:	d108      	bne.n	8002332 <HAL_UART_Transmit+0x7e>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d104      	bne.n	8002332 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	61bb      	str	r3, [r7, #24]
 8002330:	e003      	b.n	800233a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002342:	e02d      	b.n	80023a0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2200      	movs	r2, #0
 800234c:	2180      	movs	r1, #128	; 0x80
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 fd99 	bl	8002e86 <UART_WaitOnFlagUntilTimeout>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e039      	b.n	80023d2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10b      	bne.n	800237c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	881a      	ldrh	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002370:	b292      	uxth	r2, r2
 8002372:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	3302      	adds	r3, #2
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	e008      	b.n	800238e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	781a      	ldrb	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b292      	uxth	r2, r2
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	3301      	adds	r3, #1
 800238c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1cb      	bne.n	8002344 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2200      	movs	r2, #0
 80023b4:	2140      	movs	r1, #64	; 0x40
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 fd65 	bl	8002e86 <UART_WaitOnFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e005      	b.n	80023d2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	e000      	b.n	80023d2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
  }
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3720      	adds	r7, #32
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d113      	bne.n	8002434 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00e      	beq.n	8002434 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b00      	cmp	r3, #0
 800241e:	d009      	beq.n	8002434 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 8114 	beq.w	8002652 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	4798      	blx	r3
      }
      return;
 8002432:	e10e      	b.n	8002652 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80d6 	beq.w	80025e8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d105      	bne.n	8002452 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80cb 	beq.w	80025e8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00e      	beq.n	800247a <HAL_UART_IRQHandler+0x9e>
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2201      	movs	r2, #1
 800246c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002472:	f043 0201 	orr.w	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00e      	beq.n	80024a2 <HAL_UART_IRQHandler+0xc6>
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2202      	movs	r2, #2
 8002494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800249a:	f043 0204 	orr.w	r2, r3, #4
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <HAL_UART_IRQHandler+0xee>
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2204      	movs	r2, #4
 80024bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024c2:	f043 0202 	orr.w	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d104      	bne.n	80024e8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2208      	movs	r2, #8
 80024ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f4:	f043 0208 	orr.w	r2, r3, #8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00f      	beq.n	8002526 <HAL_UART_IRQHandler+0x14a>
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800251e:	f043 0220 	orr.w	r2, r3, #32
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8093 	beq.w	8002656 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00c      	beq.n	8002554 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002558:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d004      	beq.n	8002572 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800256e:	2b00      	cmp	r3, #0
 8002570:	d031      	beq.n	80025d6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fd02 	bl	8002f7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	2b40      	cmp	r3, #64	; 0x40
 8002584:	d123      	bne.n	80025ce <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002594:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d013      	beq.n	80025c6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a2:	4a30      	ldr	r2, [pc, #192]	; (8002664 <HAL_UART_IRQHandler+0x288>)
 80025a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fbfd 	bl	8000daa <HAL_DMA_Abort_IT>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d016      	beq.n	80025e4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80025c0:	4610      	mov	r0, r2
 80025c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c4:	e00e      	b.n	80025e4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f858 	bl	800267c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025cc:	e00a      	b.n	80025e4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f854 	bl	800267c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d4:	e006      	b.n	80025e4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f850 	bl	800267c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80025e2:	e038      	b.n	8002656 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e4:	bf00      	nop
    return;
 80025e6:	e036      	b.n	8002656 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00d      	beq.n	800260e <HAL_UART_IRQHandler+0x232>
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002604:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fd07 	bl	800301a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800260c:	e026      	b.n	800265c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00d      	beq.n	8002634 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002626:	2b00      	cmp	r3, #0
 8002628:	d017      	beq.n	800265a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4798      	blx	r3
    }
    return;
 8002632:	e012      	b.n	800265a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00e      	beq.n	800265c <HAL_UART_IRQHandler+0x280>
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d009      	beq.n	800265c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 fccd 	bl	8002fe8 <UART_EndTransmit_IT>
    return;
 800264e:	bf00      	nop
 8002650:	e004      	b.n	800265c <HAL_UART_IRQHandler+0x280>
      return;
 8002652:	bf00      	nop
 8002654:	e002      	b.n	800265c <HAL_UART_IRQHandler+0x280>
    return;
 8002656:	bf00      	nop
 8002658:	e000      	b.n	800265c <HAL_UART_IRQHandler+0x280>
    return;
 800265a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	08002fbd 	.word	0x08002fbd

08002668 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002690:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002694:	b08a      	sub	sp, #40	; 0x28
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4bbc      	ldr	r3, [pc, #752]	; (80029b8 <UART_SetConfig+0x328>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ce:	430b      	orrs	r3, r1
 80026d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4ab2      	ldr	r2, [pc, #712]	; (80029bc <UART_SetConfig+0x32c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d004      	beq.n	8002702 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fe:	4313      	orrs	r3, r2
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002712:	430a      	orrs	r2, r1
 8002714:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4aa9      	ldr	r2, [pc, #676]	; (80029c0 <UART_SetConfig+0x330>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d126      	bne.n	800276e <UART_SetConfig+0xde>
 8002720:	4ba8      	ldr	r3, [pc, #672]	; (80029c4 <UART_SetConfig+0x334>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b03      	cmp	r3, #3
 800272c:	d81a      	bhi.n	8002764 <UART_SetConfig+0xd4>
 800272e:	a201      	add	r2, pc, #4	; (adr r2, 8002734 <UART_SetConfig+0xa4>)
 8002730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002734:	08002745 	.word	0x08002745
 8002738:	08002755 	.word	0x08002755
 800273c:	0800274d 	.word	0x0800274d
 8002740:	0800275d 	.word	0x0800275d
 8002744:	2301      	movs	r3, #1
 8002746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800274a:	e0ab      	b.n	80028a4 <UART_SetConfig+0x214>
 800274c:	2302      	movs	r3, #2
 800274e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002752:	e0a7      	b.n	80028a4 <UART_SetConfig+0x214>
 8002754:	2304      	movs	r3, #4
 8002756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800275a:	e0a3      	b.n	80028a4 <UART_SetConfig+0x214>
 800275c:	2308      	movs	r3, #8
 800275e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002762:	e09f      	b.n	80028a4 <UART_SetConfig+0x214>
 8002764:	2310      	movs	r3, #16
 8002766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800276a:	bf00      	nop
 800276c:	e09a      	b.n	80028a4 <UART_SetConfig+0x214>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a95      	ldr	r2, [pc, #596]	; (80029c8 <UART_SetConfig+0x338>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d138      	bne.n	80027ea <UART_SetConfig+0x15a>
 8002778:	4b92      	ldr	r3, [pc, #584]	; (80029c4 <UART_SetConfig+0x334>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b0c      	cmp	r3, #12
 8002784:	d82c      	bhi.n	80027e0 <UART_SetConfig+0x150>
 8002786:	a201      	add	r2, pc, #4	; (adr r2, 800278c <UART_SetConfig+0xfc>)
 8002788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278c:	080027c1 	.word	0x080027c1
 8002790:	080027e1 	.word	0x080027e1
 8002794:	080027e1 	.word	0x080027e1
 8002798:	080027e1 	.word	0x080027e1
 800279c:	080027d1 	.word	0x080027d1
 80027a0:	080027e1 	.word	0x080027e1
 80027a4:	080027e1 	.word	0x080027e1
 80027a8:	080027e1 	.word	0x080027e1
 80027ac:	080027c9 	.word	0x080027c9
 80027b0:	080027e1 	.word	0x080027e1
 80027b4:	080027e1 	.word	0x080027e1
 80027b8:	080027e1 	.word	0x080027e1
 80027bc:	080027d9 	.word	0x080027d9
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027c6:	e06d      	b.n	80028a4 <UART_SetConfig+0x214>
 80027c8:	2302      	movs	r3, #2
 80027ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027ce:	e069      	b.n	80028a4 <UART_SetConfig+0x214>
 80027d0:	2304      	movs	r3, #4
 80027d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027d6:	e065      	b.n	80028a4 <UART_SetConfig+0x214>
 80027d8:	2308      	movs	r3, #8
 80027da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027de:	e061      	b.n	80028a4 <UART_SetConfig+0x214>
 80027e0:	2310      	movs	r3, #16
 80027e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027e6:	bf00      	nop
 80027e8:	e05c      	b.n	80028a4 <UART_SetConfig+0x214>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a77      	ldr	r2, [pc, #476]	; (80029cc <UART_SetConfig+0x33c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d125      	bne.n	8002840 <UART_SetConfig+0x1b0>
 80027f4:	4b73      	ldr	r3, [pc, #460]	; (80029c4 <UART_SetConfig+0x334>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d011      	beq.n	8002826 <UART_SetConfig+0x196>
 8002802:	2b10      	cmp	r3, #16
 8002804:	d802      	bhi.n	800280c <UART_SetConfig+0x17c>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <UART_SetConfig+0x186>
 800280a:	e014      	b.n	8002836 <UART_SetConfig+0x1a6>
 800280c:	2b20      	cmp	r3, #32
 800280e:	d006      	beq.n	800281e <UART_SetConfig+0x18e>
 8002810:	2b30      	cmp	r3, #48	; 0x30
 8002812:	d00c      	beq.n	800282e <UART_SetConfig+0x19e>
 8002814:	e00f      	b.n	8002836 <UART_SetConfig+0x1a6>
 8002816:	2300      	movs	r3, #0
 8002818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800281c:	e042      	b.n	80028a4 <UART_SetConfig+0x214>
 800281e:	2302      	movs	r3, #2
 8002820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002824:	e03e      	b.n	80028a4 <UART_SetConfig+0x214>
 8002826:	2304      	movs	r3, #4
 8002828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800282c:	e03a      	b.n	80028a4 <UART_SetConfig+0x214>
 800282e:	2308      	movs	r3, #8
 8002830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002834:	e036      	b.n	80028a4 <UART_SetConfig+0x214>
 8002836:	2310      	movs	r3, #16
 8002838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800283c:	bf00      	nop
 800283e:	e031      	b.n	80028a4 <UART_SetConfig+0x214>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a5d      	ldr	r2, [pc, #372]	; (80029bc <UART_SetConfig+0x32c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d129      	bne.n	800289e <UART_SetConfig+0x20e>
 800284a:	4b5e      	ldr	r3, [pc, #376]	; (80029c4 <UART_SetConfig+0x334>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002858:	d014      	beq.n	8002884 <UART_SetConfig+0x1f4>
 800285a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285e:	d802      	bhi.n	8002866 <UART_SetConfig+0x1d6>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d007      	beq.n	8002874 <UART_SetConfig+0x1e4>
 8002864:	e016      	b.n	8002894 <UART_SetConfig+0x204>
 8002866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800286a:	d007      	beq.n	800287c <UART_SetConfig+0x1ec>
 800286c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002870:	d00c      	beq.n	800288c <UART_SetConfig+0x1fc>
 8002872:	e00f      	b.n	8002894 <UART_SetConfig+0x204>
 8002874:	2300      	movs	r3, #0
 8002876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800287a:	e013      	b.n	80028a4 <UART_SetConfig+0x214>
 800287c:	2302      	movs	r3, #2
 800287e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002882:	e00f      	b.n	80028a4 <UART_SetConfig+0x214>
 8002884:	2304      	movs	r3, #4
 8002886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800288a:	e00b      	b.n	80028a4 <UART_SetConfig+0x214>
 800288c:	2308      	movs	r3, #8
 800288e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002892:	e007      	b.n	80028a4 <UART_SetConfig+0x214>
 8002894:	2310      	movs	r3, #16
 8002896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800289a:	bf00      	nop
 800289c:	e002      	b.n	80028a4 <UART_SetConfig+0x214>
 800289e:	2310      	movs	r3, #16
 80028a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a44      	ldr	r2, [pc, #272]	; (80029bc <UART_SetConfig+0x32c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	f040 80fb 	bne.w	8002aa6 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80028b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d824      	bhi.n	8002902 <UART_SetConfig+0x272>
 80028b8:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <UART_SetConfig+0x230>)
 80028ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028be:	bf00      	nop
 80028c0:	080028e5 	.word	0x080028e5
 80028c4:	08002903 	.word	0x08002903
 80028c8:	080028ed 	.word	0x080028ed
 80028cc:	08002903 	.word	0x08002903
 80028d0:	080028f3 	.word	0x080028f3
 80028d4:	08002903 	.word	0x08002903
 80028d8:	08002903 	.word	0x08002903
 80028dc:	08002903 	.word	0x08002903
 80028e0:	080028fb 	.word	0x080028fb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80028e4:	f7ff fa86 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 80028e8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80028ea:	e00d      	b.n	8002908 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80028ec:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <UART_SetConfig+0x340>)
 80028ee:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80028f0:	e00a      	b.n	8002908 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80028f2:	f7ff f9e9 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 80028f6:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80028f8:	e006      	b.n	8002908 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80028fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028fe:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002900:	e002      	b.n	8002908 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	76fb      	strb	r3, [r7, #27]
        break;
 8002906:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 81c8 	beq.w	8002ca0 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	429a      	cmp	r2, r3
 800291e:	d305      	bcc.n	800292c <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	429a      	cmp	r2, r3
 800292a:	d902      	bls.n	8002932 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	76fb      	strb	r3, [r7, #27]
 8002930:	e1b6      	b.n	8002ca0 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8002932:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002936:	2b08      	cmp	r3, #8
 8002938:	f200 80a2 	bhi.w	8002a80 <UART_SetConfig+0x3f0>
 800293c:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <UART_SetConfig+0x2b4>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	08002969 	.word	0x08002969
 8002948:	08002a81 	.word	0x08002a81
 800294c:	080029d5 	.word	0x080029d5
 8002950:	08002a81 	.word	0x08002a81
 8002954:	08002a09 	.word	0x08002a09
 8002958:	08002a81 	.word	0x08002a81
 800295c:	08002a81 	.word	0x08002a81
 8002960:	08002a81 	.word	0x08002a81
 8002964:	08002a57 	.word	0x08002a57
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002968:	f7ff fa44 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 800296c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4619      	mov	r1, r3
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	f04f 0400 	mov.w	r4, #0
 800297e:	0214      	lsls	r4, r2, #8
 8002980:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002984:	020b      	lsls	r3, r1, #8
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6852      	ldr	r2, [r2, #4]
 800298a:	0852      	lsrs	r2, r2, #1
 800298c:	4611      	mov	r1, r2
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	eb13 0b01 	adds.w	fp, r3, r1
 8002996:	eb44 0c02 	adc.w	ip, r4, r2
 800299a:	4658      	mov	r0, fp
 800299c:	4661      	mov	r1, ip
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f04f 0400 	mov.w	r4, #0
 80029a6:	461a      	mov	r2, r3
 80029a8:	4623      	mov	r3, r4
 80029aa:	f7fd fc17 	bl	80001dc <__aeabi_uldivmod>
 80029ae:	4603      	mov	r3, r0
 80029b0:	460c      	mov	r4, r1
 80029b2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80029b4:	e067      	b.n	8002a86 <UART_SetConfig+0x3f6>
 80029b6:	bf00      	nop
 80029b8:	efff69f3 	.word	0xefff69f3
 80029bc:	40008000 	.word	0x40008000
 80029c0:	40013800 	.word	0x40013800
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40004400 	.word	0x40004400
 80029cc:	40004800 	.word	0x40004800
 80029d0:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	085b      	lsrs	r3, r3, #1
 80029da:	f04f 0400 	mov.w	r4, #0
 80029de:	49ae      	ldr	r1, [pc, #696]	; (8002c98 <UART_SetConfig+0x608>)
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	eb13 0b01 	adds.w	fp, r3, r1
 80029e8:	eb44 0c02 	adc.w	ip, r4, r2
 80029ec:	4658      	mov	r0, fp
 80029ee:	4661      	mov	r1, ip
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f04f 0400 	mov.w	r4, #0
 80029f8:	461a      	mov	r2, r3
 80029fa:	4623      	mov	r3, r4
 80029fc:	f7fd fbee 	bl	80001dc <__aeabi_uldivmod>
 8002a00:	4603      	mov	r3, r0
 8002a02:	460c      	mov	r4, r1
 8002a04:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002a06:	e03e      	b.n	8002a86 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002a08:	f7ff f95e 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8002a0c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4619      	mov	r1, r3
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	f04f 0400 	mov.w	r4, #0
 8002a1e:	0214      	lsls	r4, r2, #8
 8002a20:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002a24:	020b      	lsls	r3, r1, #8
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6852      	ldr	r2, [r2, #4]
 8002a2a:	0852      	lsrs	r2, r2, #1
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	eb13 0b01 	adds.w	fp, r3, r1
 8002a36:	eb44 0c02 	adc.w	ip, r4, r2
 8002a3a:	4658      	mov	r0, fp
 8002a3c:	4661      	mov	r1, ip
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f04f 0400 	mov.w	r4, #0
 8002a46:	461a      	mov	r2, r3
 8002a48:	4623      	mov	r3, r4
 8002a4a:	f7fd fbc7 	bl	80001dc <__aeabi_uldivmod>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	460c      	mov	r4, r1
 8002a52:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002a54:	e017      	b.n	8002a86 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	f04f 0400 	mov.w	r4, #0
 8002a60:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002a64:	f144 0100 	adc.w	r1, r4, #0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f04f 0400 	mov.w	r4, #0
 8002a70:	461a      	mov	r2, r3
 8002a72:	4623      	mov	r3, r4
 8002a74:	f7fd fbb2 	bl	80001dc <__aeabi_uldivmod>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	460c      	mov	r4, r1
 8002a7c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002a7e:	e002      	b.n	8002a86 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	76fb      	strb	r3, [r7, #27]
            break;
 8002a84:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a8c:	d308      	bcc.n	8002aa0 <UART_SetConfig+0x410>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a94:	d204      	bcs.n	8002aa0 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	e0ff      	b.n	8002ca0 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	76fb      	strb	r3, [r7, #27]
 8002aa4:	e0fc      	b.n	8002ca0 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aae:	f040 8083 	bne.w	8002bb8 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8002ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d85e      	bhi.n	8002b78 <UART_SetConfig+0x4e8>
 8002aba:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <UART_SetConfig+0x430>)
 8002abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac0:	08002ae5 	.word	0x08002ae5
 8002ac4:	08002b05 	.word	0x08002b05
 8002ac8:	08002b25 	.word	0x08002b25
 8002acc:	08002b79 	.word	0x08002b79
 8002ad0:	08002b41 	.word	0x08002b41
 8002ad4:	08002b79 	.word	0x08002b79
 8002ad8:	08002b79 	.word	0x08002b79
 8002adc:	08002b79 	.word	0x08002b79
 8002ae0:	08002b61 	.word	0x08002b61
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ae4:	f7ff f986 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002ae8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	005a      	lsls	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	085b      	lsrs	r3, r3, #1
 8002af4:	441a      	add	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b02:	e03c      	b.n	8002b7e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b04:	f7ff f98c 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8002b08:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	005a      	lsls	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	085b      	lsrs	r3, r3, #1
 8002b14:	441a      	add	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b22:	e02c      	b.n	8002b7e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002b2e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6852      	ldr	r2, [r2, #4]
 8002b36:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b3e:	e01e      	b.n	8002b7e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b40:	f7ff f8c2 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8002b44:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	005a      	lsls	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	441a      	add	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b5e:	e00e      	b.n	8002b7e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002b76:	e002      	b.n	8002b7e <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	76fb      	strb	r3, [r7, #27]
        break;
 8002b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	2b0f      	cmp	r3, #15
 8002b82:	d916      	bls.n	8002bb2 <UART_SetConfig+0x522>
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8a:	d212      	bcs.n	8002bb2 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f023 030f 	bic.w	r3, r3, #15
 8002b94:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	89fb      	ldrh	r3, [r7, #14]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	89fa      	ldrh	r2, [r7, #14]
 8002bae:	60da      	str	r2, [r3, #12]
 8002bb0:	e076      	b.n	8002ca0 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	76fb      	strb	r3, [r7, #27]
 8002bb6:	e073      	b.n	8002ca0 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8002bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d85c      	bhi.n	8002c7a <UART_SetConfig+0x5ea>
 8002bc0:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <UART_SetConfig+0x538>)
 8002bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc6:	bf00      	nop
 8002bc8:	08002bed 	.word	0x08002bed
 8002bcc:	08002c0b 	.word	0x08002c0b
 8002bd0:	08002c29 	.word	0x08002c29
 8002bd4:	08002c7b 	.word	0x08002c7b
 8002bd8:	08002c45 	.word	0x08002c45
 8002bdc:	08002c7b 	.word	0x08002c7b
 8002be0:	08002c7b 	.word	0x08002c7b
 8002be4:	08002c7b 	.word	0x08002c7b
 8002be8:	08002c63 	.word	0x08002c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bec:	f7ff f902 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002bf0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	085a      	lsrs	r2, r3, #1
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	441a      	add	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c08:	e03a      	b.n	8002c80 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c0a:	f7ff f909 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8002c0e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	085a      	lsrs	r2, r3, #1
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	441a      	add	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c26:	e02b      	b.n	8002c80 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	085b      	lsrs	r3, r3, #1
 8002c2e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002c32:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6852      	ldr	r2, [r2, #4]
 8002c3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c42:	e01d      	b.n	8002c80 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c44:	f7ff f840 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8002c48:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	085a      	lsrs	r2, r3, #1
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	441a      	add	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c60:	e00e      	b.n	8002c80 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c78:	e002      	b.n	8002c80 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	76fb      	strb	r3, [r7, #27]
        break;
 8002c7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	d90a      	bls.n	8002c9c <UART_SetConfig+0x60c>
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	d206      	bcs.n	8002c9c <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	e003      	b.n	8002ca0 <UART_SetConfig+0x610>
 8002c98:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002cac:	7efb      	ldrb	r3, [r7, #27]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3728      	adds	r7, #40	; 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08002cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01a      	beq.n	8002dce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db6:	d10a      	bne.n	8002dce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	605a      	str	r2, [r3, #4]
  }
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002e0a:	f7fd feb1 	bl	8000b70 <HAL_GetTick>
 8002e0e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d10e      	bne.n	8002e3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f82a 	bl	8002e86 <UART_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e020      	b.n	8002e7e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d10e      	bne.n	8002e68 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f814 	bl	8002e86 <UART_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e00a      	b.n	8002e7e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2220      	movs	r2, #32
 8002e72:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	4613      	mov	r3, r2
 8002e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e96:	e05d      	b.n	8002f54 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d059      	beq.n	8002f54 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea0:	f7fd fe66 	bl	8000b70 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d302      	bcc.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d11b      	bne.n	8002eee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ec4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e042      	b.n	8002f74 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d02b      	beq.n	8002f54 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f0a:	d123      	bne.n	8002f54 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f14:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f24:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0201 	bic.w	r2, r2, #1
 8002f34:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e00f      	b.n	8002f74 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69da      	ldr	r2, [r3, #28]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d092      	beq.n	8002e98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f92:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7ff fb4e 	bl	800267c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff fb2b 	bl	8002668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <__libc_init_array>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	4e0d      	ldr	r6, [pc, #52]	; (8003068 <__libc_init_array+0x38>)
 8003034:	4c0d      	ldr	r4, [pc, #52]	; (800306c <__libc_init_array+0x3c>)
 8003036:	1ba4      	subs	r4, r4, r6
 8003038:	10a4      	asrs	r4, r4, #2
 800303a:	2500      	movs	r5, #0
 800303c:	42a5      	cmp	r5, r4
 800303e:	d109      	bne.n	8003054 <__libc_init_array+0x24>
 8003040:	4e0b      	ldr	r6, [pc, #44]	; (8003070 <__libc_init_array+0x40>)
 8003042:	4c0c      	ldr	r4, [pc, #48]	; (8003074 <__libc_init_array+0x44>)
 8003044:	f000 f820 	bl	8003088 <_init>
 8003048:	1ba4      	subs	r4, r4, r6
 800304a:	10a4      	asrs	r4, r4, #2
 800304c:	2500      	movs	r5, #0
 800304e:	42a5      	cmp	r5, r4
 8003050:	d105      	bne.n	800305e <__libc_init_array+0x2e>
 8003052:	bd70      	pop	{r4, r5, r6, pc}
 8003054:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003058:	4798      	blx	r3
 800305a:	3501      	adds	r5, #1
 800305c:	e7ee      	b.n	800303c <__libc_init_array+0xc>
 800305e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003062:	4798      	blx	r3
 8003064:	3501      	adds	r5, #1
 8003066:	e7f2      	b.n	800304e <__libc_init_array+0x1e>
 8003068:	08003100 	.word	0x08003100
 800306c:	08003100 	.word	0x08003100
 8003070:	08003100 	.word	0x08003100
 8003074:	08003104 	.word	0x08003104

08003078 <memset>:
 8003078:	4402      	add	r2, r0
 800307a:	4603      	mov	r3, r0
 800307c:	4293      	cmp	r3, r2
 800307e:	d100      	bne.n	8003082 <memset+0xa>
 8003080:	4770      	bx	lr
 8003082:	f803 1b01 	strb.w	r1, [r3], #1
 8003086:	e7f9      	b.n	800307c <memset+0x4>

08003088 <_init>:
 8003088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308a:	bf00      	nop
 800308c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308e:	bc08      	pop	{r3}
 8003090:	469e      	mov	lr, r3
 8003092:	4770      	bx	lr

08003094 <_fini>:
 8003094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003096:	bf00      	nop
 8003098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309a:	bc08      	pop	{r3}
 800309c:	469e      	mov	lr, r3
 800309e:	4770      	bx	lr
